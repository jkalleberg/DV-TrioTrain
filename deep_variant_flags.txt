Runs all 3 steps to go from input DNA reads to output VCF/gVCF files.

This script currently provides the most common use cases and standard models.
If you want to access more flags that are available in `make_examples`,
`call_variants`, and `postprocess_variants`, you can also call them separately
using the binaries in the Docker image.

For more details, see:
https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-quick-start.md

flags:

/opt/deepvariant/bin/run_deepvariant.py:
  --call_variants_extra_args: A comma-separated list of flag_name=flag_value.
    "flag_name" has to be valid flags for call_variants.py. If the flag_value is
    boolean, it has to be flag_name=true or flag_name=false.
  --customized_model: Optional. A path to a model checkpoint to load for the
    `call_variants` step. If not set, the default for each --model_type will be
    used
  --[no]dry_run: Optional. If True, only prints out commands without executing
    them.
    (default: 'false')
  --intermediate_results_dir: Optional. If specified, this should be an existing
    directory that is visible insider docker, and will be used to to store
    intermediate outputs.
  --logging_dir: Optional. Directory where we should write log files for each
    stage and optionally runtime reports.
  --make_examples_extra_args: A comma-separated list of flag_name=flag_value.
    "flag_name" has to be valid flags for make_examples.py. If the flag_value is
    boolean, it has to be flag_name=true or flag_name=false.
  --model_type: <WGS|WES|PACBIO|HYBRID_PACBIO_ILLUMINA>: Required. Type of model
    to use for variant calling. Set this flag to use the default model
    associated with each type, and it will set necessary flags corresponding to
    each model. If you want to use a customized model, add --customized_model
    flag in addition to this flag.
  --num_shards: Optional. Number of shards for make_examples step.
    (default: '1')
    (an integer)
  --output_gvcf: Optional. Path where we should write gVCF file.
  --output_vcf: Required. Path where we should write VCF file.
  --postprocess_variants_extra_args: A comma-separated list of
    flag_name=flag_value. "flag_name" has to be valid flags for
    postprocess_variants.py. If the flag_value is boolean, it has to be
    flag_name=true or flag_name=false.
  --reads: Required. Aligned, sorted, indexed BAM file containing the reads we
    want to call. Should be aligned to a reference genome compatible with --ref.
  --ref: Required. Genome reference to use. Must have an associated FAI index as
    well. Supports text or gzipped references. Should match the reference used
    to align the BAM file provided to --reads.
  --regions: Optional. Space-separated list of regions we want to process.
    Elements can be region literals (e.g., chr20:10-20) or paths to BED/BEDPE
    files.
  --[no]runtime_report: Output make_examples runtime metrics and create a visual
    runtime report using runtime_by_region_vis. Only works with --logging_dir.
    (default: 'false')
  --sample_name: Sample name to use instead of the sample name from the input
    reads BAM (SM tag in the header). This flag is used for both make_examples
    and postprocess_variants.
  --[no]use_hp_information: (Deprecated in v1.4.0) Optional. If True,
    corresponding flags will be set to properly use the HP information present
    in the BAM input.
  --[no]vcf_stats_report: Optional. Output a visual report (HTML) of statistics
    about the output VCF.
    (default: 'true')
  --[no]version: Optional. If true, print out version number and exit.

absl.app:
  -?,--[no]help: show this help
    (default: 'false')
  --[no]helpfull: show full help
    (default: 'false')
  --[no]helpshort: show this help
    (default: 'false')
  --[no]helpxml: like --helpfull, but generates XML output
    (default: 'false')
  --[no]only_check_args: Set to true to validate args and exit.
    (default: 'false')
  --[no]pdb: Alias for --pdb_post_mortem.
    (default: 'false')
  --[no]pdb_post_mortem: Set to true to handle uncaught exceptions with PDB post
    mortem.
    (default: 'false')
  --profile_file: Dump profile information to a file (for python -m pstats).
    Implies --run_with_profiling.
  --[no]run_with_pdb: Set to true for PDB debug mode
    (default: 'false')
  --[no]run_with_profiling: Set to true for profiling the script. Execution will
    be slower, and the output format might change over time.
    (default: 'false')
  --[no]use_cprofile_for_profiling: Use cProfile instead of the profile module
    for profiling. This has no effect unless --run_with_profiling is set.
    (default: 'true')

absl.logging:
  --[no]alsologtostderr: also log to stderr?
    (default: 'false')
  --log_dir: directory to write logfiles into
    (default: '')
  --logger_levels: Specify log level of loggers. The format is a CSV list of
    `name:level`. Where `name` is the logger name used with
    `logging.getLogger()`, and `level` is a level name  (INFO, DEBUG, etc). e.g.
    `myapp.foo:INFO,other.logger:DEBUG`
    (default: '')
  --[no]logtostderr: Should only log to stderr?
    (default: 'false')
  --[no]showprefixforinfo: If False, do not prepend prefix to info messages when
    it's logged to stderr, --verbosity is set to INFO level, and python logging
    is used.
    (default: 'true')
  --stderrthreshold: log messages at this level, or more severe, to stderr in
    addition to the logfile.  Possible values are 'debug', 'info', 'warning',
    'error', and 'fatal'.  Obsoletes --alsologtostderr. Using --alsologtostderr
    cancels the effect of this flag. Please also note that this flag is subject
    to --verbosity and requires logfile not be stderr.
    (default: 'fatal')
  -v,--verbosity: Logging verbosity level. Messages logged at this level or
    lower will be included. Set to 1 for debug logging. If the flag was not set
    or supplied, the value will be changed from the default of -1 (warning) to 0
    (info) after flags are parsed.
    (default: '-1')
    (an integer)

absl.testing.absltest:
  --test_random_seed: Random seed for testing. Some test frameworks may change
    the default value of this flag between runs, so it is not appropriate for
    seeding probabilistic tests.
    (default: '301')
    (an integer)
  --test_randomize_ordering_seed: If positive, use this as a seed to randomize
    the execution order for test cases. If "random", pick a random seed to use.
    If 0 or not set, do not randomize test case execution order. This flag also
    overrides the TEST_RANDOMIZE_ORDERING_SEED environment variable.
    (default: '')
  --test_srcdir: Root of directory tree where source files live
    (default: '')
  --test_tmpdir: Directory for temporary testing files
    (default: '/tmp/absl_testing')
  --xml_output_file: File to store XML test results
    (default: '')

tensorflow.python.ops.parallel_for.pfor:
  --[no]op_conversion_fallback_to_while_loop: DEPRECATED: Flag is ignored.
    (default: 'true')

tensorflow.python.tpu.client.client:
  --[no]hbm_oom_exit: Exit the script when the TPU HBM is OOM.
    (default: 'true')
  --[no]runtime_oom_exit: Exit the script when the TPU runtime is OOM.
    (default: 'true')

absl.flags:
  --flagfile: Insert flag definitions from the given file into the command line.
    (default: '')
  --undefok: comma-separated list of flag names that it is okay to specify on
    the command line even if the program does not define a flag with that name.
    IMPORTANT: flags in this list that have arguments MUST use the --flag=value
    format.
    (default: '')
