{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DV-TrioTrain v0.8","text":"<p>DV-TrioTrain is a model development framework for DeepVariant: a deep-learning-based germline variant caller. Here we provide an automated pipeline for extending DeepVariant v1.4.0 in new species.</p>"},{"location":"#models-built-by-dv-triotrain-do-not-require-trio-binned-data-for-variant-calling","title":"Models built by DV-TrioTrain do not require trio-binned data for variant calling.","text":"<p>Our unique re-training approach enables the model to incorporate inheritance expectations. Using TrioTrain to build new versions of DeepVariant models requires trio-binned genomes, the final model produced by TrioTrain works on individual genomes, while prioritizing features of inherited variants. </p> <p>Get Started with TrioTrain</p>"},{"location":"#contributing-to-triotrain","title":"Contributing to TrioTrain","text":"<p>Please open a Github pull request if you wish to contribute to TrioTrain.</p>"},{"location":"#license","title":"License","text":"<p>GPL-3.0 license</p>"},{"location":"about/about/","title":"DV-TrioTrain v0.8","text":""},{"location":"about/about/#background","title":"Background","text":"<p>The exisiting DeepVariant models were only trained on human data. Species-specific DeepVariant models exist for mosquito genomes, and the endangered K\u0101k\u0101p\u014d parot. We built TrioTrain (DV-TT) to enable us to build custom DeepVariant models for cattle, bison, and yak genomes. Our custom models incorporate allele frequency data from over 5,500 published Bovine samples, making DV-TT the first tool to expand the existing Allele Frequency model into non-human, mammalian genomes. Our work illustrates the limitations of applying models built exclusively with human-genome datasets in other species. Our findings suggest that comparative genomics approaches in deep learning model development offer performance benefits over species-specific models.</p>"},{"location":"about/about/#how-triotrain-works","title":"How TrioTrain works","text":"<p>DV-TT is a SLURM-based, automated pipeline that produces new DV model(s) for germline variant-calling in any diploid organism, focusing on species without NIST-GIAB reference materials.</p> <p></p> <p>Assuming the necessary training data for your favorite species already exist, TrioTrain automatically enables customizing the DeepVariant model. Additional details about the required data can be found here.</p>"},{"location":"about/about/#initialization","title":"Initialization","text":"<p>Currently, TrioTrain supports initializing training  with weights from an exisiting DeepVariant Model, using one of the following options:</p> <ul> <li>Human WGS DeepVariant-v1.4 formats<ol> <li>Default model - includes the insert size channel</li> <li>Allele Frequency model - adds one additional channel from a Population VCF</li> </ol> </li> <li>Any custom model satisfying the channel expectations below</li> </ul> <p>An index of compatible models can be found here.</p>"},{"location":"about/about/#training","title":"Training","text":"<p>For each trio provided, TrioTrain will perform two (2) iterations of re-training, one for each parent. The starting parent is a user-specified parameter, either <code>Mother</code> or <code>Father</code>. With the first iteration an existing DeepVariant model is used to initalize the weights and build upon prior learning. Subsequent iterations begin with a prior iteration's selected checkpoint.</p>"},{"location":"about/about/#evaluation","title":"Evaluation","text":"<p>As a training iteration proceeds, learning is evaluated using labeled examples from the parents' offspring. The same individual's genome is used for both iterations run for a trio. Our assumption is that a model trained on a parent genome will be better at genotyping variants inherited from that parent in the offspring's genome.</p>"},{"location":"about/about/#selection","title":"Selection","text":"<p>Model weights that produce the maximum F1-score in the offspring's genomeare selected for further testing, and to become the starting point for the next iteration.</p>"},{"location":"about/about/#testing","title":"Testing","text":"<p>Testing occurs for all model iterations with a set of genomes previously unseen by the model. Variants are called with the model iterations by providing a custom checkpoint to the single-step variant caller.</p>"},{"location":"about/about/#comparision","title":"Comparision","text":"<p>Variants produced during a training iteration by a candidate model are compared against a user-defined benchmark set with hap.py, a standardized benchmarking tool recommended by the Global Alliance for Genomic Health (GA4GH). See GA4GH's resources on Germline Small Variant Benchmarking Tools and Standards, or the original Illumina hap.py github page to learn more.</p>"},{"location":"about/about/#author","title":"Author","text":"<p>Jenna Kalleberg (jakth2@mail.missouri.org)</p>"},{"location":"about/about/#acknowledgements","title":"Acknowledgements","text":"<p>Many thanks to the developers and contributors of the many open source packages used by TrioTrain.</p>"},{"location":"about/license/","title":"License","text":"<p>The legal stuff.</p>"},{"location":"about/license/#included-projects","title":"Included projects","text":"<p>Tools used under license from the following projects:</p> <ul> <li>DeepVariant - View license.</li> </ul> <p>Many thanks to the authors and contributors of those wonderful projects.</p>"},{"location":"about/license/#dv-triotrain-license","title":"DV-TrioTrain License","text":"<pre><code>                GNU GENERAL PUBLIC LICENSE\n                   Version 3, 29 June 2007\n</code></pre> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/  Everyone is permitted to copy and distribute verbatim copies  of this license document, but changing it is not allowed.</p> <pre><code>                        Preamble\n</code></pre> <p>The GNU General Public License is a free, copyleft license for software and other kinds of works.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works.  By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users.  We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors.  You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights.  Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received.  You must make sure that they, too, receive or can get the source code.  And you must show them these terms so they know their rights.</p> <p>Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.</p> <p>For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software.  For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.</p> <p>Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so.  This is fundamentally incompatible with the aim of protecting users' freedom to change the software.  The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable.  Therefore, we have designed this version of the GPL to prohibit the practice for those products.  If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.</p> <p>Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary.  To prevent this, the GPL assures that patents cannot be used to render the program non-free.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p> <pre><code>                   TERMS AND CONDITIONS\n</code></pre> <ol> <li>Definitions.</li> </ol> <p>\"This License\" refers to version 3 of the GNU General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License.  Each licensee is addressed as \"you\".  \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy.  The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy.  Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies.  Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License.  If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p> <ol> <li>Source Code.</li> </ol> <p>The \"source code\" for a work means the preferred form of the work for making modifications to it.  \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form.  A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities.  However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work.  For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p> <ol> <li>Basic Permissions.</li> </ol> <p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met.  This License explicitly affirms your unlimited permission to run the unmodified Program.  The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work.  This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force.  You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright.  Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below.  Sublicensing is not allowed; section 10 makes it unnecessary.</p> <ol> <li>Protecting Users' Legal Rights From Anti-Circumvention Law.</li> </ol> <p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p> <ol> <li>Conveying Verbatim Copies.</li> </ol> <p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p> <ol> <li>Conveying Modified Source Versions.</li> </ol> <p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <pre><code>a) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\n</code></pre> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit.  Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p> <ol> <li>Conveying Non-Source Forms.</li> </ol> <p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <pre><code>a) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\n</code></pre> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling.  In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage.  For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product.  A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source.  The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information.  But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed.  Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p> <ol> <li>Additional Terms.</li> </ol> <p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law.  If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it.  (Additional permissions may be written to require their own removal in certain cases when you modify the work.)  You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <pre><code>a) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\n</code></pre> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10.  If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term.  If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p> <ol> <li>Termination.</li> </ol> <p>You may not propagate or modify a covered work except as expressly provided under this License.  Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License.  If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p> <ol> <li>Acceptance Not Required for Having Copies.</li> </ol> <p>You are not required to accept this License in order to receive or run a copy of the Program.  Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance.  However, nothing other than this License grants you permission to propagate or modify any covered work.  These actions infringe copyright if you do not accept this License.  Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p> <ol> <li>Automatic Licensing of Downstream Recipients.</li> </ol> <p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License.  You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations.  If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License.  For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p> <ol> <li>Patents.</li> </ol> <p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based.  The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version.  For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement).  To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients.  \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License.  You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p> <ol> <li>No Surrender of Others' Freedom.</li> </ol> <p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all.  For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p> <ol> <li>Use with the GNU Affero General Public License.</li> </ol> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work.  The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.</p> <ol> <li>Revised Versions of this License.</li> </ol> <p>The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number.  If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions.  However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p> <ol> <li>Disclaimer of Warranty.</li> </ol> <p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> <ol> <li>Limitation of Liability.</li> </ol> <p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <ol> <li>Interpretation of Sections 15 and 16.</li> </ol> <p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <pre><code>                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs\n</code></pre> <p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program.  It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>&lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n</code></pre> <p>The hypothetical commands <code>show w' and</code>show c' should show the appropriate parts of the General Public License.  Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\".</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/.</p> <p>The GNU General Public License does not permit incorporating your program into proprietary programs.  If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library.  If this is what you want to do, use the GNU Lesser General Public License instead of this License.  But first, please read https://www.gnu.org/licenses/why-not-lgpl.html.</p>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Warning</p> <p>Steps that require some system-specific edits for your HPC cluster will have a warning label.</p> <p>To ensure reproducibility, all configuration steps described below are included in a helper script, <code>build.sh</code>.</p> Example | <code>build.sh</code> <pre><code>#!/bin/bash\n# scripts/setup/build.sh\n\n# NOTE: Begin an interactive session first!\n# source scripts/start_interactive.sh\n\necho -e \"=== scripts/setup/build.sh &gt; start $(date)\"\n\n# Load cluster-specific modules\n# NOTE: You will need to change this bash script to \n# match your own system modules available\n# Reach out to your cluster's sys admin for \n# installation guidelines\nsource scripts/setup/modules.sh\n\n# NOTE: both are required, since can't run the \n# GPU version used for training \n# on a non-GPU hardware\n\n# Install GPU-specific apptainer container\nbash scripts/setup/build_containers.sh DeepVariant-GPU\n\n# Install CPU-specific apptainer container\nbash scripts/setup/build_containers.sh DeepVariant-CPU\n\n# Install the happ.py apptainer container\nbash scripts/setup/build_happy.sh\n\n# Install the conda env needed for python package 'triotrain'\nsource scripts/setup/build_beam.sh\n\n# Download the appropriate shuffling script from Google Genomoics Health Group\nbash scripts/setup/download_shuffle.sh\n\n# Download pre-trained models\nbash scripts/setup/download_models.sh\n\n# Download GIAB trio data v4.2.1 for benchmarking\nbash scripts/setup/download_GIAB.sh\n\n# RUN INTERACTIVELY TO MAKE SURE IT WORKS!\nbash triotrain/variant_calling/data/GIAB/bam/AJtrio.download \n\nbash triotrain/variant_calling/data/GIAB/bam/HCtrio.download \n\n# then calculate coverage with an SBATCH job \n# bash triotrain/scripts/setup/run_jobs.sh\n\n# Create the rtg-tools reference files for the Human ref genome GRCh38\n# NOTE: this must be run after download_GIAB!\nbash scripts/setup/setup_rtg_tools.sh\n\necho -e \"=== scripts/setup/build.sh &gt; end $(date)\"\n</code></pre> <p></p>"},{"location":"getting-started/configuration/#1-begin-an-interactive-session-first","title":"1. Begin an interactive session first","text":"<p>Requires Customization</p> <p>We request resource in a SLURM \"interactive session\" to allow us to run code at the command line and avoid running resource-intensive code on the login node, which could negatively impact other users.</p> <p> Option 1: Manual </p> <p>Use the following command template, make edits to match your system's resources (i.e. add a valid partition and fair-share account).</p> Run the following at the command line:<pre><code>srun --pty -p &lt;partition_name&gt; --time=0-06:00:00 --exclusive --mem=0 -A &lt;account_name&gt; /bin/bash\n</code></pre> <p> Option 2: Automated </p> <p>For repeatedly switching between different interactive session, we use the same syntax as above, but editing the provided template to match your system's resources (i.e. add a valid partition and fair-share account).</p> Run the following at the command line:<pre><code>source scripts/start_interactive.sh\n</code></pre> Example | <code>start_interactive.sh</code> <pre><code>#!/bin/bash\n# scripts/start_interactive.sh\n# An example script of requesting interactive resources for the Lewis SLURM Cluster\n# NOTE: You will need to change this to match your own setup, such as \n# altering the partition name  and qos (i.e. 'Interactive') or,\n# altering your account (i.e. 'schnabellab')\n\n# srun --pty -p gpu3 --time=0-04:00:00 -A animalsci /bin/bash\n# srun --pty -p hpc6 --time=0-04:00:00 --mem=0 --exclusive -A animalsci /bin/bash\n# srun --pty -p Interactive --qos=Interactive --time=0-04:00:00 --mem=0 --exclusive -A animalsci /bin/bash\n# srun --pty -p Interactive --qos=Interactive --time=0-04:00:00 --mem=30G -A schnabellab /bin/bash\nsrun --pty -p Lewis --time=0-04:00:00 --mem=30G -A schnabellab /bin/bash\n# srun --pty -p BioCompute --time=0-06:00:00 --exclusive --mem=0 -A schnabellab /bin/bash\n</code></pre> <p></p>"},{"location":"getting-started/configuration/#2-load-cluster-specific-modules","title":"2. Load cluster-specific modules","text":"<p>Requires Customization</p> <p>This executable is how TrioTrain finds the required software on your local HPC. TrioTrain will repeatedly use this script to load all modules and the required bash helper functions. Edit the provided template to match your system (i.e. add a valid module name).</p> Run the following at the command line:<pre><code>source scripts/setup/modules.sh </code></pre> Example | <code>modules.sh</code> <pre><code>#!/usr/bin/bash\n## scripts/setup/modules.sh\n\necho \"=== scripts/setup/modules.sh start &gt; $(date)\"\n\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Wiping modules... \"\nmodule purge\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Done wipe modules\"\n\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Loading modules... \"\n\n# Enable loading of pkgs from prior manager\nmodule load rss/rss-2020\n\n# Update to a newer, but still old, version of Curl\nmodule load curl/7.72.0\n\n# Update to a newer version of git,\n# Required for Git extensions on VSCode\nmodule load git/2.29.0\n\n# Enable \"conda activate\" rather than,\n# using \"source activate\"\nmodule load miniconda3/4.9\nexport CONDA_BASE=$(conda info --base)\n\n# System Requirement to use 'conda activate' \nsource ${CONDA_BASE}/etc/profile.d/conda.sh\nconda deactivate\n\n# Modules required for re-training\nmodule load java/openjdk/java-1.8.0-openjdk\nmodule load singularity/singularity\nmodule load picard/2.26.10\n\n# Modules required for post-procesing variants\nmodule load cuda/11.1.0\nmodule load bcftools/1.14\nmodule load htslib/1.14\nmodule load samtools/1.14\nmodule load gcc/10.2.0\n\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Done Loading Modules\"\n\necho -e \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Conda Base Environment:\\n${CONDA_BASE}\"\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Python Version:\"\npython3 --version\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Java Version:\"\njava -version\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Apptainer Version:\"\napptainer --version\n\n# Source DeepVariant version and CACHE Dir\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Adding Apptainer variables... \"\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: This step is required to build DeepVariant image(s)\"\n\nif [ -z \"$1\" ]\nthen\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Using defaults, DeepVariant version 1.4.0\"\n    export BIN_VERSION_DV=\"1.4.0\"\n    export BIN_VERSION_DT=\"1.4.0\"\nelse\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Using inputs, DeepVariant version $1\"\n    export BIN_VERSION_DV=\"$1\"\n    export BIN_VERSION_DT=\"$1\"\nfi\n\nexport APPTAINER_CACHEDIR=\"${PWD}/APPTAINER_CACHE\"\nexport APPTAINER_TMPDIR=\"${PWD}/APPTAINER_TMPDIR\"\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Done adding Apptainer variables\"\n\n# Confirm that it worked\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: DeepVariant Version: ${BIN_VERSION_DV}\"\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Apptainer Cache: ${APPTAINER_CACHEDIR}\"\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Apptainer Tmp: ${APPTAINER_TMPDIR}\"\n\n# Activating the Bash Sub-Routine to handle errors\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Loading bash helper functions... \"\nsource scripts/setup/helper_functions.sh\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Done Loading bash helper functions\"\n\necho \"=== scripts/setup/modules.sh &gt; end $(date)\"\n</code></pre> Alternate Versions of DeepVariant <p>Providing a valid version number as the first argument to <code>modules.sh</code> will change the version used. Using any version greater than v1.4.0 is untested!</p>"},{"location":"getting-started/configuration/#3-install-apptainersingularity-containers","title":"3. Install Apptainer/Singularity containers","text":"<p>We need local copies of the two (2) versions of DeepVariant containers, and one (1) container for <code>hap.py</code>:</p> <ol> <li>GPU-specific container used for training</li> <li>CPU-specific container used for all other steps</li> <li><code>hap.py</code> - we strongly recommend using a containerized version as this tool uses the depreciated Python v2.7 making it incompatible with either DeepVariant containers, and the TrioTrain conda environment.</li> </ol> Run the following at the command line:<pre><code># Install GPU-specific DV apptainer container\nbash scripts/setup/build_containers.sh DeepVariant-GPU\n\n# Install CPU-specific DV apptainer container\nbash scripts/setup/build_containers.sh DeepVariant-CPU\n\n# Install the happ.py apptainer container\nbash scripts/setup/build_happy.sh\n</code></pre> Example | <code>build_containers.sh</code> <pre><code>#!/bin/bash\n# scripts/setup/build_containers.sh\n\necho \"=== scripts/setup/build_containers.sh &gt; start $(date)\" $1\n\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Creating Apptainer CACHE/ and TMP/, if needed\"\ninstall --directory --verbose ${APPTAINER_CACHEDIR}\ninstall --directory --verbose ${APPTAINER_TMPDIR}\n\n# Only want to build these Apptainer Image(s) once!\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Installing Container Image(s), if necessary\"\n\nif [[ $1 == 'DeepVariant-CPU' ]]; then\n  version=\"${BIN_VERSION_DV}\"\n  image_name=\"deepvariant_${version}\"\n  docker_name=\"${version}\"\n  command=\"run_deepvariant\"\nelif [[ $1 == 'DeepVariant-GPU' ]]; then\n  version=\"${BIN_VERSION_DV}\"\n  image_name=\"deepvariant_${version}-gpu\"\n  docker_name=\"${version}-gpu\"\n  command=\"run_deepvariant\"\nelif [[ $1 == 'DeepTrio-CPU' ]]; then\n  version=\"${BIN_VERSION_DT}\"\n  image_name=\"deepvariant_deeptrio-${version}\"\n  docker_name=\"deeptrio-${version}\"\n  command=\"deeptrio/run_deeptrio\"\nelif [[ $1 == 'DeepTrio-GPU' ]]; then\n  version=\"${BIN_VERSION_DT}\"\n  image_name=\"deepvariant_deeptrio-${version}-gpu\"\n  docker_name=\"deeptrio-${BIN_VERSION_DT}-gpu\"\n  command=\"deeptrio/run_deeptrio\"\nelse\n  echo -e \"$(date '+%Y-%m-%d %H:%M:%S') ERROR: Invalid argument [$1] provided.\\n$(date '+%Y-%m-%d %H:%M:%S') INFO: Choices: [ DeepVariant-CPU, DeepTrio-CPU, DeepVariant-GPU, DeepTrio-GPU ]\\nExiting... \"\n  exit 1\nfi\n\nif test -x ./${image_name}.sif; then\n  echo -e \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Image [${image_name}.sif] has already been installed\"\n  apptainer run -B /usr/lib/locale/:/usr/lib/locale/ ${image_name}.sif /\"opt/deepvariant/bin/${command}\" --version\nelse\n  echo -e \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Image [${image_name}.sif] needs to be installed\"\n  echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Apptainer Image will go here: ${PWD}\"\n  echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Building Apptainer Image now... \"\n  apptainer pull docker://google/deepvariant:\"${docker_name}\"\n  echo \"Done: Building Apptainer Image\"\nfi\n\necho \"=== scripts/setup/build_containers.sh &gt; end $(date)\"\n</code></pre> Example | <code>build_happy.sh</code> <pre><code>#!/bin/bash\n# build_happy.sh\n\necho \"=== scripts/setup/build_happy.sh &gt; start $(date)\"\n\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Creating Apptainer CACHE/ and TMP/, if needed\"\ninstall --directory --verbose ${APPTAINER_CACHEDIR}\ninstall --directory --verbose ${APPTAINER_TMPDIR}\n\n# Only want to build these Apptainer Image(s) once!\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Installing Hap.py Container Image(s), if necessary...\"\n\nif test -x ./hap.py_v0.3.12.sif; then\n  echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Image [hap.py_v0.3.12.sif] has already been installed\"\n  apptainer run -B /usr/lib/locale/:/usr/lib/locale/ hap.py_v0.3.12.sif /opt/hap.py/bin/hap.py --help\nelse\n  echo \"$(date '+%Y-%m-%d %H:%M:%S')INFO: Image [hap.py_v0.3.12.sif] needs to be installed\"\n  echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Apptainer Image will go here: ${PWD}\"\n  echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Building Apptainer Image now... \"\n  apptainer pull docker://jmcdani20/hap.py:v0.3.12\n  echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Done Building Hap.py Apptainer Image\"\nfi\n\necho \"=== scripts/setup/build_happy.sh &gt; end $(date)\"\n</code></pre> Container Versions <p>Both the GPU and CPU containers are required, since you can't run the GPU version used for training on a non-GPU hardware.</p>"},{"location":"getting-started/configuration/#4-install-the-conda-environment","title":"4. Install the Conda environment","text":"<p>Warning</p> <p>CAUTION: TrioTrain and DeepVariant require highly specific package versions, and TrioTrain assumes that a pre-built conda environment is located here: <code>./miniconda_envs/beam_v2.30</code>. We are unable to support users opt to make significant changes, or deviate the conda env path at this time.</p> <p>This conda environment includes the DeepVariant requirements, such as Apache Beam, Tensorflow, etc. The conda environment can take awhile to build. We recommend requesting ample memory during your interactive session before proceeding. </p> Run the following at the command line:<pre><code>source scripts/setup/build_beam.sh\n\n# `source` is used instead of `bash` to by-pass system issues with `conda activate` \n# specific to MU Lewis, which may not be required for your system.\n</code></pre> Example | <code>build_beam.sh</code> <pre><code>#!/bin/bash\n# scripts/setup/build_beam.sh\n\necho -e \"=== scripts/setup/build_beam.sh &gt; start $(date)\"\n\n##--- NOTE: ----##\n##  You must have an interactive session\n##  with more mem than defaults to work!\n##--------------##\n\nif [ ! -d ./miniconda_envs/beam_v2.30 ] ; then\n     # If missing an enviornment called \"beam_v2.30\", \n     # initalize this env with only the anaconda package \n     conda create --yes --prefix ./miniconda_envs/beam_v2.30\nfi\n\n# Then, activate the new environment\nsource ${CONDA_BASE}/etc/profile.d/conda.sh\nconda deactivate\nconda activate ./miniconda_envs/beam_v2.30\n\n##--- Configure an environment-specific .condarc file ---##\n## NOTE: Only performed once:\n# Changes the (env) prompt to avoid printing the full path\nconda config --env --set env_prompt '({name})'\n\n# Put the package download channels in a specific order\nconda config --env --add channels defaults\nconda config --env --add channels bioconda\nconda config --env --add channels conda-forge\n\n# Download packages flexibly\nconda config --env --set channel_priority flexible\n\n# Install the project-specific packages\n# in the currently active env\nconda install -p ./miniconda_envs/beam_v2.30 -y -c conda-forge python=3.8 pandas numpy python-dotenv python-snappy tensorflow=2.5 apache-beam=2.30 regex spython natsort rtg-tools\n\n# Deactivate the conda env to continue with build process\nconda deactivate\n\n###===== Notes about Beam specific packages =====###\n### Python = Apache Beam Python SDK only supports v3.6-3.8\n### Scipy = scientific libraries for Python\n### DotEnv = enables environment variable configuration across bash and python\n### Snappy = A fast compressor/decompressor (required)\n### Apache-Beam = unified programming model for batch and stream processes\n### Tensorflow = eval metrics visualizations via TensorBoard for CPU, use v2.5.0 for DV v1.4\n### Regex = required for update regular expression handling\n### Spython = interface between Singularity/Apptainer bash commands and Python\n### Natsort = enables sorting of file iterators\n### RTG-Tools = required for Mendelian Inhertiance Error calculations performed for summarize\n\necho -e \"=== scripts/setup/build_beam.sh &gt; end $(date)\"\n</code></pre>"},{"location":"getting-started/configuration/#5-download-the-beam-shuffling-script","title":"5. Download the Beam shuffling script","text":"<p>Creates a local copy of the appropriate shuffling script from Google Genomoics Health Group.</p> Run the following at the command line:<pre><code>bash scripts/setup/download_shuffle.sh\n</code></pre> Example | <code>download_shuffle.sh</code> <pre><code>#!/bin/bash\n# scripts/setup/download_shuffle.sh\necho -e \"=== scripts/setup/download_shuffle.sh &gt; start $(date)\"\n\n##======= Download Shuffle Script =================================##\nexport SHUFFLE_VERSION=${BIN_VERSION_DV:0:3}\n\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Downloading Google Beam Shuffling Script - v${SHUFFLE_VERSION}\"\ncurl -C - https://raw.githubusercontent.com/google/deepvariant/r${SHUFFLE_VERSION}/tools/shuffle_tfrecords_beam.py -o triotrain/model_training/prep/shuffle_tfrecords_beam.py\n\n##=================================================================##\n\necho -e \"=== scripts/setup/download_shuffle.sh &gt; end $(date)\"\n</code></pre> <p> Install TrioTrain Complete the Human GIAB Tutorial </p>"},{"location":"getting-started/getting-started/","title":"Getting Started","text":"<p>There are two main audiences of DV-TrioTrain:</p> <ol> <li> <p>Model users - those who want to call variants using an existing, custom DeepVariant model produced by TrioTrain.</p> </li> <li> <p>Model builders - those who want to customize an existing DeepVariant model, by extending training on either new data, or data from another diploid species.</p> </li> </ol>"},{"location":"getting-started/getting-started/#model-users","title":"Model Users","text":"<p>Once you've identified your preferred model checkpoint, you're ready to go! Any model created by DV-TrioTrain can be used as an alternative checkpoint with the one-step, single-sample variant caller. An index of published models can be found here.</p> <p> Customizing DeepVariant with a TrioTrain model </p> <p>For SLURM-based HPC clusters, we recommend using Apptainer (formerly known as Singularity).</p> <pre><code>BIN_VERSION_DV=\"1.4.0\"\napptainer run \\\n-B /usr/lib/locale/:/usr/lib/locale/,\\\n${YOUR_INPUT_DIR}/DV-TrioTrain/:/run_dir/,\\\n${YOUR_REF_DIR}:/ref_dir/,\\\n${YOUR_BAM_DIR}:/bam_dir/,\\\n${YOUR_OUTPUT_DIR}:/out_dir/,\\\n${CUSTOM_MODEL_DIR}:/start_dir/,\\\n${YOUR_POPVCF_DIR}:/popVCF_dir/ \\\ndeepvariant_${BIN_VERSION_DV}.sif \\\n/opt/deepvariant/bin/run_deepvariant \\\n--model_type=WGS \\\n--ref=/ref_dir/${YOUR_REFERENCE} \\\n--reads=/bam_dir/${YOUR_BAM} \\\n--output_vcf=/out_dir/${YOUR_OUTPUT_VCF} \\\n--intermediate_results_dir=/out_dir/tmp/ \\\n--num_shards=$(nproc) \\ **This will use all your cores to run make_examples. Feel free to change.**\n  --customized_model=/start_dir/${YOUR_CKPT_NAME} \\\n--make_examples_extra_args=\"use_allele_frequency=true,population_vcfs=/popVCF_dir/${YOUR_POP_VCF}\" \\\n--dry_run=false **Default is false. If set to true, commands will be printed out but not executed.\n</code></pre>"},{"location":"getting-started/getting-started/#model-builders","title":"Model Builders","text":"<p>We designed TrioTrain to be compatible with any diploid species without NIST-GIAB reference materials. The current version of TrioTrain extends DeepVariant with cattle, bison, and yak genomes, and can be applied for other domesticated animal species with the requisite data.</p> <p>TrioTrain builds new models by starting with an existing DeepVariant model, specifically DeepVariant v1.4 short-read Whole Genome Sequence (WGS) models trained with the human GIAB samples. TrioTrain can optionally add the allele frequency channel, if given population-level allele frequency data (PopVCF).</p> <p>Warning</p> <p>The tutorial walk-through intentionally uses complete human genomes, and will produce ~2 TB of intermediate / output data within the chosen working directory. However, the last step of the tutorial will clean up any temporary files.</p> <p> TrioTrain Setup </p> <p>Getting started with TrioTrain is straight-foward, but requires careful configuration to work on your SLURM-based HPC cluster. The user guides below will walk you through what components require tweaking, depending on your system.</p> <p>First, change directories to your working directory, where TrioTrain will be run: <code>cd /path/to/working_dir</code></p> <p>Then, complete these guides in the following order:</p> <p> Installation Guide  Configuration Guide  Human GIAB Tutorial</p> <p>  Other Commands and Options </p> <p>There are various other commands and options available. For a complete list of commands, use the <code>--help</code> flag:</p> <pre><code>python3 triotrain/run_trio_train.py --help\n</code></pre> <p>Got a question </p>"},{"location":"getting-started/installation/","title":"Installing TrioTrain","text":"<p>Warning</p> <p>If you're unfamiliar with SLURM, navigating your computing cluster, or what shared software is available to you, reach out to your HPC system's Cluster Administrator for trouble-shooting these dependencies.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Unix-like operating system (cannot run on Windows)</li> <li>Python 3.8</li> <li>Access to a SLURM-based High Performance Computing Cluster<ul> <li>TrioTrain uses both CPU and GPU resources</li> <li>You must have at least 2 GPU cards on a single compute node to execute re-training effectively!</li> </ul> </li> </ul>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":"<p>Warning</p> <p>Deviating from these versions will likely cause errors with TrioTrain. Proceed with caution! </p> <p>Warning</p> <p>If you have to manually install any tools, be sure to add <code>export PATH=/cluster/path/to/local/software/bin/:$PATH</code> to your edited <code>modules.sh</code> file.</p> <p>TrioTrain expects the software listed below to be pre-built, and available locally on your SLURM-based HPC cluster. The following minimum software versions are required:</p> Tool Version Tool Version <code>DeepVariant</code> 1.4.0 <code>gcc</code> 10.2.0 <code>cuda</code> 11.1.0 <code>curl</code> 7.72.0 <code>picard</code> 2.26.10 <code>minicoda3</code> 4.9 <code>bcftools</code> 1.14 <code>java/openjdk</code> 17.0.3 <code>htslib</code> 1.14 <code>apptainer</code> 1.1.7-1.el7 <code>samtools</code> 1.14 <p>TrioTrain assumes that the default <code>modules.sh</code> script works for your cluster, as this is how the pipeline finds all required software. YOU WILL NEED TO EDIT THIS FILE TO MATCH YOUR CLUSTER, or specify an alternative helper script by adding the following flag with your cluster-specific script.</p> Add the following flag whenever you run TrioTrain:<pre><code>python3 triotrain/model_train/run_trio_train.py --modules &lt;/path/to/your/module.sh&gt; </code></pre> Example | <code>modules.sh</code> <pre><code>#!/usr/bin/bash\n## scripts/setup/modules.sh\n\necho \"=== scripts/setup/modules.sh start &gt; $(date)\"\n\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Wiping modules... \"\nmodule purge\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Done wipe modules\"\n\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Loading modules... \"\n\n# Enable loading of pkgs from prior manager\nmodule load rss/rss-2020\n\n# Update to a newer, but still old, version of Curl\nmodule load curl/7.72.0\n\n# Update to a newer version of git,\n# Required for Git extensions on VSCode\nmodule load git/2.29.0\n\n# Enable \"conda activate\" rather than,\n# using \"source activate\"\nmodule load miniconda3/4.9\nexport CONDA_BASE=$(conda info --base)\n\n# System Requirement to use 'conda activate' \nsource ${CONDA_BASE}/etc/profile.d/conda.sh\nconda deactivate\n\n# Modules required for re-training\nmodule load java/openjdk/java-1.8.0-openjdk\nmodule load singularity/singularity\nmodule load picard/2.26.10\n\n# Modules required for post-procesing variants\nmodule load cuda/11.1.0\nmodule load bcftools/1.14\nmodule load htslib/1.14\nmodule load samtools/1.14\nmodule load gcc/10.2.0\n\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Done Loading Modules\"\n\necho -e \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Conda Base Environment:\\n${CONDA_BASE}\"\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Python Version:\"\npython3 --version\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Java Version:\"\njava -version\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Apptainer Version:\"\napptainer --version\n\n# Source DeepVariant version and CACHE Dir\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Adding Apptainer variables... \"\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: This step is required to build DeepVariant image(s)\"\n\nif [ -z \"$1\" ]\nthen\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Using defaults, DeepVariant version 1.4.0\"\n    export BIN_VERSION_DV=\"1.4.0\"\n    export BIN_VERSION_DT=\"1.4.0\"\nelse\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Using inputs, DeepVariant version $1\"\n    export BIN_VERSION_DV=\"$1\"\n    export BIN_VERSION_DT=\"$1\"\nfi\n\nexport APPTAINER_CACHEDIR=\"${PWD}/APPTAINER_CACHE\"\nexport APPTAINER_TMPDIR=\"${PWD}/APPTAINER_TMPDIR\"\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Done adding Apptainer variables\"\n\n# Confirm that it worked\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: DeepVariant Version: ${BIN_VERSION_DV}\"\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Apptainer Cache: ${APPTAINER_CACHEDIR}\"\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Apptainer Tmp: ${APPTAINER_TMPDIR}\"\n\n# Activating the Bash Sub-Routine to handle errors\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Loading bash helper functions... \"\nsource scripts/setup/helper_functions.sh\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Done Loading bash helper functions\"\n\necho \"=== scripts/setup/modules.sh &gt; end $(date)\"\n</code></pre>"},{"location":"getting-started/installation/#install-triotrain","title":"Install TrioTrain","text":"Run the following at the command line:<pre><code>git clone git@github.com:jkalleberg/DV-TrioTrain.git\n</code></pre> <p>Configure TrioTrain </p>"},{"location":"getting-started/walk-through/","title":"Human GIAB Tutorial","text":"<p> This tutorial completes one round of re-training with a Human trio from GIAB. </p> <p>Warning | Storage Needs</p> <p>Completing this tutorial will produce ~2T of intermediate and output data. Ensure you  have sufficient space before proceeding!</p>"},{"location":"getting-started/walk-through/#1-confirm-successful-configuration","title":"1. Confirm Successful Configuration","text":"Check | Installation Run the following at the command line:<pre><code>cd DV-TrioTrain\nls\n</code></pre> Expected outputs:<pre><code>deepvariant_1.4.0-gpu.sif  docs    hap.py_v0.3.12.sif  miniconda_envs  README.md  triotrain\ndeepvariant_1.4.0.sif      errors  LICENSE             mkdocs.yml      scripts\n</code></pre> <ul> <li> <p><code>triotrain/</code> directory contains Python modules for the DV-TrioTrain package</p> </li> <li> <p><code>scripts/</code> directory contains Bash helper scripts and functions that can be used as templates</p> </li> </ul>"},{"location":"getting-started/walk-through/#2-activate-environment","title":"2. Activate Environment","text":"<p>Repeat the first two steps of Configuration:</p> <ul> <li>Step 1: Interactive Session</li> <li>Step 2: Load Modules</li> </ul>"},{"location":"getting-started/walk-through/#4-download-pre-trained-models","title":"4. Download pre-trained models","text":"<p>Warning | Download Size</p> <p>Running a local copy of a container requires us to create a local copy of the <code>model.ckpt</code> files from v1.4.0 of DeepVariant. These checkpoints are the human-trained models produced by Google Genomics Health Group. Details about published models compatible with TrioTrain can be found here.</p> <p>We need to download (2) two model checkpoints:</p> <ul> <li>the default human model</li> <li>the WGS.AF human model</li> </ul> Run the following at the command line:<pre><code>bash scripts/setup/download_models.sh\n</code></pre> Example | <code>download_models.sh</code> <pre><code>#!/bin/bash\n# scripts/setup/download_models.sh\n\"\"\"\nNOTES: These model ckpts are only required for warm-starting re-training, and are not used with 'run_deepvariant'\n\n\"\"\"\necho -e \"=== scripts/setup/download_models.sh &gt; start $(date)\"\n\n##======= Downloading default WGS model (without AF channel) ===================##\n#   This model allows for ONLY 7 layers in the example images \n#   Meaning, it is NOT compatible examples built with the allele frequency channel!\n\n#   To view in web-browser, execute this to obtain a valid link: \n#       echo \"https://console.cloud.google.com/storage/browser/deepvariant/models/DeepVariant/${BIN_VERSION_DV}/DeepVariant-inception_v3-${BIN_VERSION_DV}+data-wgs_standard\"\n\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Downloading 7-channel WGS model checkpoint (with InsertSize, but without AlleleFreq) - DeepVariant v${BIN_VERSION_DV}\"\nNO_AF_MODEL_BUCKET=\"https://storage.googleapis.com/deepvariant/models/DeepVariant/${BIN_VERSION_DV}/DeepVariant-inception_v3-${BIN_VERSION_DV}+data-wgs_standard\"\n\n# Use the same file naming convention and enable restarting of any interrupted downloads\ncurl --create-dirs --continue-at - \"${NO_AF_MODEL_BUCKET}/model.ckpt.{data-00000-of-00001,index,example_info.json,meta}\" --output \"triotrain/model_training/pretrained_models/v${BIN_VERSION_DV}_withIS_noAF/model.ckpt.#1\"\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Done - Downloading 7-channel WGS model checkpoint (with InsertSize, but without AlleleFreq)\"\n##========================================================================##\n\n##======= Downloading custom WGS model (with Allele Frequency channel) ======================##\n#   This model allows for 8 layers in the example images \n#   Meaning, it IS compatible compatible examples built with the allele frequency channel!\n\n#   To view in web-browser, execute this to obtain a valid link:  \n#       https://console.cloud.google.com/storage/browser/brain-genomics-public/research/allele_frequency/pretrained_model_WGS/1.4.0;tab=objects?pageState=(%22StorageObjectListTable%22:(%22f%22:%22%255B%255D%22))&amp;prefix=&amp;forceOnObjectsSortingFiltering=false\n\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Downloading 8-channel WGS model checkpoint (with InsertSize, with AlleleFreq) - DeepVariant v${BIN_VERSION_DV}\"\n\nAF_MODEL_BUCKET=\"https://storage.googleapis.com/brain-genomics-public/research/allele_frequency/pretrained_model_WGS/${BIN_VERSION_DV}\"\n\n# Use the same file naming convention and enable restarting of any interrupted downloads\ncurl --create-dirs --continue-at - \"${AF_MODEL_BUCKET}/model.ckpt.{data-00000-of-00001,index,meta,example_info.json}\" --output \"triotrain/model_training/pretrained_models/v${BIN_VERSION_DV}_withIS_withAF/wgs_af.model.ckpt.#1\"\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Done - Downloading 8-channel WGS model checkpoint (with InsertSize, with AlleleFreq)\"\n\n##========================================================================##\n\necho -e \"=== scripts/setup/download_models.sh &gt; end $(date)\"\n</code></pre> Check | Default human model Run the following at the command line:<pre><code>ls triotrain/model_training/pretrained_models/v1.4.0_withIS_noAF/\n</code></pre> Expected outputs:<pre><code>model.ckpt.data-00000-of-00001  model.ckpt.example_info.json  model.ckpt.index  model.ckpt.meta\n</code></pre> Check | WGS.AF human model Run the following at the command line:<pre><code>ls triotrain/model_training/pretrained_models/v1.4.0_withIS_withAF/\n</code></pre> Expected outputs:<pre><code>wgs_af.model.ckpt.data-00000-of-00001  wgs_af.model.ckpt.index\nwgs_af.model.ckpt.example_info.json    wgs_af.model.ckpt.meta\n</code></pre>"},{"location":"getting-started/walk-through/#5-download-raw-data","title":"5. Download Raw Data","text":"<p>Warning | Download Size</p> <p>We are using two Human trios from the v4.2.1 GIAB benchmarking data.</p> TrioNumber TrioName CommonID SampleID Relationship 1 AshkenaziJew HG002 NA24385 Son HG003 NA24149 Father HG004 NA24143 Mother 2 HanChinese HG005 NA24631 Son HG006 NA24694 Father HG007 NA24695 Mother <p>We need (5) types of raw data:</p> Number Description Extension 1. the GRCh38 reference genome <code>.fasta</code>, <code>.fai</code> 2. 1kGP Population Allele Frequency, with index file <code>.vcf.gz</code>, <code>vcf.gz.tbi</code> 3. benchmarking files per-genome truth callsets, with index files <code>.vcf.gz</code>, <code>vcf.gz.tbi</code> per genome truth regions file <code>.bed</code> 4. sample metadata checksums file <code>.md5</code> index files <code>.txt</code> 5. the aligned reads files, with index file <code>.bam</code>, <code>.bai</code> Run the following at the command line:<pre><code>bash scripts/setup/download_GIAB.sh\n</code></pre> Example | <code>download_GIAB.sh</code> <pre><code>#!/bin/bash\n# scripts/setup/download_GIAB.sh\necho -e \"=== scripts/setup/download_GIAB.sh &gt; start $(date)\"\n\n# NOTES --------------------------------------------------------------#\n# The DV developers use the following data in their walk-through docs:\n# 1) Reference Genome Version: GRCh38_no_alt_analysis_set.fasta\n# 2) Benchmark Sample: HGOO3 [AshkenazimTrio-Father], typically only Chr20.\n# 3) PopVCF (without genotypes): v3_missing2ref\n\n# However, for a direct comparision between our cattle model and previous models, we need to calculate Mendelian Inheritance Errors (MIE). Therefore, we will be downloading the parents in this trio. We'll also need to download the reference PopVCF used to build the humanWGS_AF model.\n\n#-------------------------------------------------------------------#\n#                            GIAB Trio1                             #\n#-------------------------------------------------------------------#\n# Known as the Ashkenazi Jew Trio\n# From Personal Genome Project\n# AJ Son = HG002_NA24385_son\n# AJ Father = HG003_NA24149_father\n# AJ Mother = HG004_NA24143_mother\n\n#-------------------------------------------------------------------#\n#                            GIAB Trio2                             #\n#-------------------------------------------------------------------#\n# Known as the Han Chinese Trio\n# From Personal Genome Project\n# Chinese Son = HG005_NA24631_son\n# Chinese Father = HG006_NA24694_father\n# Chinese Mother = HG007_NA24695_mother\n\n# A preprint describing these calls is at https://doi.org/10.1101/2020.07.24.212712.  The paper(s) above can be cited for use of the benchmark, and please cite http://www.nature.com/articles/sdata201625 (doi:10.1038/sdata.2016.25) when using the corresponding sequencing data.\n\ncd triotrain/variant_calling/data/GIAB\n\n##===================================================================\n##                         General Files                             \n##===================================================================\n\n## --------------- Download Reference Genome ------------------------\n## NOTES ----\n## Files Downloaded Include:\n## 1. GRCh38 reference genome [FASTA]\n## 2. GRCh38 index [FAI]\n\n# Create the output dir\ninstall --directory --verbose reference\n\nREFDIR=ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/001/405/GCA_000001405.15_GRCh38/seqs_for_alignment_pipelines.ucsc_ids/\nREFFILE=GCA_000001405.15_GRCh38_no_alt_analysis_set\n\nif [ ! -f ./reference/md5checksums.txt ]; then\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: downloading GRCh38 checksum now...\"\n    curl -s --continue-at - ${REFDIR}/md5checksums.txt -o ./reference/md5checksums.txt\nelse\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: file found | './reference/md5checksums.txt'\"\nfi\n\n# Define the file extensions to be downloaded:\ndeclare -a Ext=(\".fna.gz\" \".fna.fai\")\n\nif [ ! -f \"./reference/GRCh38_no_alt_analysis_set.fasta\" ]; then \n    for e in ${Ext[@]}; do\n        if [ -f ./reference/md5checksums.txt ]; then\n            echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: downloading ${REFFILE}${e} now...\"\n            curl -s --continue-at - \"${REFDIR}/${REFFILE}${e}\" -o \"./reference/${REFFILE}${e}\" \n            echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: checking ${REFFILE}${e} for corruption...\"\n            check_sum=$(cat ./reference/md5checksums.txt | grep \"${REFFILE}${e}\")\n            old_path=\"./\"\n            new_path=\"./reference/\"\n            valid_check_sum=\"${check_sum/$old_path/$new_path}\"\n            echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: $(echo $valid_check_sum | md5sum -c)\"\n        else\n            echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: file found | '${REFFILE}${e}'\"\n        fi\n    done\nfi\n\nif [ -f \"./reference/${REFFILE}.fna.gz\" ]; then\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: Unzipping GRCh38 and re-naming reference files now...\"\n    gunzip -c \"./reference/${REFFILE}.fna.gz\" &gt; \"./reference/GRCh38_no_alt_analysis_set.fasta\"\n    rm \"./reference/${REFFILE}.fna.gz\"\n    mv \"./reference/${REFFILE}.fna.fai\" ./reference/GRCh38_no_alt_analysis_set.fasta.fai\nelse\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: reference re-named already... SKIPPING AHEAD\"\nfi\n\n## --------------- Download Population VCF --------------------------\n## NOTES ----\n## Files Downloaded Include:\n## 1. One-thousand genomes (1kGP) allele frequencies [VCF]\n## 2. Allele-frequencies index [TBI]\n## These data are ~940GiB to download completly.\n## THERE ARE TWO PAGES OF FILES! (v)\n## The newest version of WGS_AF model can be viewed on GCP here: https://console.cloud.google.com/storage/browser/brain-genomics-public/research/cohort/1KGP/cohort_dv_glnexus_opt/v3_missing2ref?pageState=(%22StorageObjectListTable%22:(%22f%22:%22%255B%255D%22))&amp;prefix=&amp;forceOnObjectsSortingFiltering=false\n\n# Create the output dir\nmkdir -p allele_freq\n\n# Define where to get the AF data\nAF_DIR=\"https://storage.googleapis.com/brain-genomics-public/research/cohort/1KGP/cohort_dv_glnexus_opt/v3_missing2ref\"\n\nfor i in {{1..22},X,Y}\ndo  \n    if [ ! -f ./allele_freq/cohort-chr${i}.release_missing2ref.no_calls.vcf.gz ]; then\n        echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: downloading chr${i} PopVCF...\"\n        curl -s --continue-at - ${AF_DIR}/cohort-chr${i}.release_missing2ref.no_calls.vcf.gz -o ./allele_freq/cohort-chr${i}.release_missing2ref.no_calls.vcf.gz \n    else\n        echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: file found | 'chr${i} PopVCF'\"\n    fi\n\n    if [ ! -f ./allele_freq/cohort-chr${i}.release_missing2ref.no_calls.vcf.gz.tbi ]; then\n        echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: downloading chr${i} index ...\" \n        curl -s --continue-at - ${AF_DIR}/cohort-chr${i}.release_missing2ref.no_calls.vcf.gz.tbi -o ./allele_freq/cohort-chr${i}.release_missing2ref.no_calls.vcf.gz.tbi \n    else\n        echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: file found | 'chr${i} index'\"\n    fi\ndone\n\n# Merge the chr AF into a genome-wide AF\nif [ ! -f \"./allele_freq/PopVCF.merge.list\" ]; then \n    for i in {{1..22},X,Y}\n    do\n        echo \"././triotrain/variant_calling/data/GIAB/allele_freq/cohort-chr$i.release_missing2ref.no_calls.vcf.gz\" &gt;&gt; ./allele_freq/PopVCF.merge.list\n    done\nfi\n\nif [ ! -f \"./allele_freq/concat_PopVCFs.sh\" ]; then \necho -e \"source ./scripts/setup/modules.sh\nbcftools concat --file-list ./triotrain/variant_calling/data/GIAB/allele_freq/PopVCF.merge.list -Oz -o ./triotrain/variant_calling/data/GIAB/allele_freq/cohort.release_missing2ref.no_calls.vcf.gz\nbcftools index ./triotrain/variant_calling/data/GIAB/allele_freq/cohort.release_missing2ref.no_calls.vcf.gz\" &gt; ./allele_freq/concat_PopVCFs.sh\nfi\n\n##===================================================================\n##                       Trio-Specific Files                             \n##===================================================================\n\n## --------------- Download GIAB Truth Files ------------------------\n## NOTES ---- \n## Currently using v4.2.1\n## Files Downloaded Include:\n## 1. benchmarking region files [BED]\n## 2. benchmarking genotypes [VCF]\n## 3. benchmarking genotype index [TBI]\n## The benchmarking files from NIST can be found here: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/\n\n# Create output dir\nmkdir -p benchmark\n\n# Define where to get the truth data\nTRUTHDIR=https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release\nbenchmark_version=\"_GRCh38_1_22_v4.2.1_benchmark\"\nbench_ext=(\"_noinconsistent.bed\" \".vcf.gz\" \".vcf.gz.tbi\")\n\n#-------------------------------------------------------------------#\n#                            GIAB Trio1                             #\n#-------------------------------------------------------------------#\ndeclare -A Trio1=([\"HG002\"]=\"HG002_NA24385_son\" [\"HG003\"]=\"HG003_NA24149_father\" [\"HG004\"]=\"HG004_NA24143_mother\")\nfor t in ${!Trio1[@]}; do\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: downloading ${t}=${Trio1[${t}]} benchmarking files now...\"\n    for e in ${!bench_ext[@]}; do\n        if [ ! -f \"./benchmark/${t}${benchmark_version}${bench_ext[${e}]}\" ]; then\n            echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: downloading ${t}${benchmark_version}${bench_ext[${e}]}...\"\n            curl --continue-at - ${TRUTHDIR}/AshkenazimTrio/${Trio1[${t}]}/NISTv4.2.1/GRCh38/${t}${benchmark_version}${bench_ext[${e}]} -o ./benchmark/${t}${benchmark_version}${bench_ext[${e}]}\n            # No MD5 listed on NIST FTP SITE!\n        else\n            echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: file found | '${t}${benchmark_version}${bench_ext[${e}]}'\"\n        fi\n    done\n\n    # Download the README\n    if [ ! -f \"./benchmark/${t}_README_v4.2.1.txt\" ]; then\n        echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: downloading ${t} readme...\"\n        curl -s --continue-at - ${TRUTHDIR}/AshkenazimTrio/${Trio1[${t}]}/NISTv4.2.1/README_v4.2.1.txt -o ./benchmark/${t}_README_v4.2.1.txt \n    else\n        echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: file found | '${t}_README_v4.2.1.txt'\"\n    fi\ndone\n\n#-------------------------------------------------------------------#\n#                            GIAB Trio2                             #\n#-------------------------------------------------------------------#\nbench_ext=(\".bed\" \".vcf.gz\" \".vcf.gz.tbi\")\ndeclare -A Trio2=([\"HG005\"]=\"HG005_NA24631_son\" [\"HG006\"]=\"HG006_NA24694_father\" [\"HG007\"]=\"HG007_NA24695_mother\")\n\nfor t in ${!Trio2[@]}; do\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: downloading ${t}=${Trio2[${t}]} benchmarking files now...\"\n\n    # Download the MD5\n    if [ ! -f \"./benchmark/${t}_benchmark.md5\" ]; then\n        echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: downloading ${t} MD5...\"\n        curl -s --continue-at - ${TRUTHDIR}/ChineseTrio/${Trio2[${t}]}/NISTv4.2.1/md5.in -o ./benchmark/${t}_benchmark.md5 \n    else\n        echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: file found | '${t}_benchmark.md5'\"\n    fi\n\n    for e in ${!bench_ext[@]}; do\n        if [ ! -f \"./benchmark/${t}${benchmark_version}${bench_ext[${e}]}\" ]; then\n            echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: downloading ${t}${benchmark_version}${bench_ext[${e}]}...\"\n            curl --continue-at - ${TRUTHDIR}/ChineseTrio/${Trio2[${t}]}/NISTv4.2.1/GRCh38/${t}${benchmark_version}${bench_ext[${e}]} -o ./benchmark/${t}${benchmark_version}${bench_ext[${e}]}\n\n            echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: checking ./benchmark/${t}${benchmark_version}${bench_ext[${e}]} for corruption...\"\n            check_sum=$(cat ./benchmark/${t}_benchmark.md5 | grep \"${t}${benchmark_version}${bench_ext[${e}]}\" | head -n1)\n            old_path=\"GRCh38/\"\n            new_path=\"./benchmark/\"\n            valid_check_sum=\"${check_sum/$old_path/$new_path}\"\n            msg=$(echo $valid_check_sum | md5sum -c -)\n            if [ $? -eq 0 ]; then \n                echo $(date '+%Y-%m-%d %H:%M:%S') INFO: $msg || error_exit $msg tracker_file.txt\n            fi\n        else\n            echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: file found | '${t}${benchmark_version}${bench_ext[${e}]}'\"\n        fi\n    done\n\n    # Download the README\n    if [ ! -f \"./benchmark/${t}_README_v4.2.1.txt\" ]; then\n        echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: downloading ${t} readme...\"\n        curl -s --continue-at - ${TRUTHDIR}/ChineseTrio/${Trio2[${t}]}/NISTv4.2.1/README_v4.2.1.txt -o ./benchmark/${t}_README_v4.2.1.txt \n    else\n        echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: file found | '${t}_README_v4.2.1.txt'\"\n    fi\n\ndone\n\n## --------------- Download GIAB Aligned Reads ----------------------\n## NOTES ---- \n## Files Downloaded Include:\n## 1. NIST Illumina 2x250bp sequence reads alligned to GRCh38 [BAM]\n## 2. Sequence reads index [BAI]\n## 3. MD5 checksum [MD5]\n## Indexes for various sequencing data and aligned files can be found here: https://github.com/genome-in-a-bottle/giab_data_indexes\n\n## Function for downloading BAM + BAI files -----------\ndownload () {\n    file_input=$1\n\n    # split the file_path into an array\n    IFS='_' read -r -a result &lt;&lt;&lt; \"$file_input\"\n    trio_name=${result[0]}\n\n    if [ ! -f \"./bam/${trio_name}.download\" ]; then \n        # echo \"source ./scripts/setup/modules.sh\" &gt; ./bam/$trio_name.download\n        # Command Translation:\n\n        # For each line after the header row:\n        # First, use the first column in each row,\n        # from the .txt file input, and\n        # extract the BAM file path end, called \"filename\", using\n        # the shell cmd called \"basename\", then\n        # close that shell command\n\n        # Next, if \"filename\" containes the correct reference genome name,\n        # print a command to download that file\n        # with timestamp wrappers before/after\n\n        # Next, process the MD5 flexibly...\n        # For HG002, use the corrected MD5 sum (output)\n        # For all others, use the original MD5 sum ($2)\n\n        # Next, write the correct MD5 + filepath to a new file, and\n        # print the command for checking the MD5 sum \n\n        # Next, use the 3rd column in each row, \n        # from the .txt file input, and\n        # extract the BAI file path end, called \"secondfile\", using\n        # the shell cmd called \"basename\", then\n        # close that shell command\n\n        # Next, if \"filename\" containes the correct reference genome name,\n        # print a command to download that file\n        # with timestamp wrappers before/after\n\n        # Next, process the MD5 flexibly...\n        # For HG002, use the corrected MD5 sum (output)\n        # For all others, use the original MD5 sum ($2)\n\n        # Next, write the correct MD5 + filepath to a new file, and\n        # print the command for checking the MD5 sum.\n\n        awk -F '\\t' 'NR!=1 { \n            cmd = \"basename \" $1\n            cmd | getline filename\n            close(cmd)\n            }\n\n            index(filename, \"GRCh38\") {\n                print \"echo $(date \\\"+%Y-%m-%d %H:%M:%S\\\") INFO: downloading [\"filename\"] now...\" \n                print \"curl -o ./triotrain/variant_calling/data/GIAB/bam/\"filename\" -C - \"$1\" --keepalive-time 300\"\n                print \"echo $(date \\\"+%Y-%m-%d %H:%M:%S\\\") INFO: downloading [\"filename\"]... done\"\n                }\n\n                filename ~ /HG002.GRCh38/ {\n                    cmd = \"grep -Fw \"filename\" ./bam/HG002_corrected_md5sums.feb19upload.txt\" \n                    cmd | getline result\n                    close(cmd)\n                    split(result, output, \" \")\n                    print \"echo \"output[1]\"\\t./triotrain/variant_calling/data/GIAB/bam/\"filename\" &gt; ./triotrain/variant_calling/data/GIAB/bam/\"filename\".md5\"\n                }\n\n                filename !~ /HG002/ &amp;&amp; filename ~ /GRCh38/ {\n                    print \"echo \"$2\"\\t./triotrain/variant_calling/data/GIAB/bam/\"filename\" &gt; ./triotrain/variant_calling/data/GIAB/bam/\"filename\".md5\"\n                }\n\n            index(filename, \"GRCh38\") {\n                print \"echo $(date \\\"+%Y-%m-%d %H:%M:%S\\\") INFO: checking [\"filename\"] for corruption...\"\n                print \"md5sum -c ./triotrain/variant_calling/data/GIAB/bam/\"filename\".md5\"\n                print \"echo $(date \\\"+%Y-%m-%d %H:%M:%S\\\") INFO: checking [\"filename\"] for corruption... done\"\n\n                print \"echo ----------------------------------------------------\"\n            }\n\n            {\n                cmd = \"basename \" $3\n                cmd | getline secondfile\n                close(cmd)\n            }\n\n            index(secondfile, \"GRCh38\") {\n                print \"echo $(date \\\"+%Y-%m-%d %H:%M:%S\\\") INFO: downloading [\"secondfile\"] now...\"  \n                print \"curl -o ./triotrain/variant_calling/data/GIAB/bam/\"secondfile\" -C - \"$3\n                print \"echo $(date \\\"+%Y-%m-%d %H:%M:%S\\\") INFO: downloading [\"secondfile\"] ... done\"\n                }\n\n                secondfile ~ /HG002.GRCh38/ {\n                    cmd = \"grep -Fw \"secondfile\" ./bam/HG002_corrected_md5sums.feb19upload.txt\" \n                    cmd | getline result\n                    close(cmd)\n                    split(result, output, \" \")\n                    print \"echo \"output[1]\"\\t./triotrain/variant_calling/data/GIAB/bam/\"secondfile\" &gt; ./triotrain/variant_calling/data/GIAB/bam/\"secondfile\".md5\"\n                }\n\n                secondfile !~ /HG002/ &amp;&amp; secondfile ~ /GRCh38/ {\n                    print \"echo \"$4\"\\t./triotrain/variant_calling/data/GIAB/bam/\"secondfile\" &gt; ./triotrain/variant_calling/data/GIAB/bam/\"secondfile\".md5\"\n                }\n\n            index(secondfile, \"GRCh38\") {\n                print \"echo $(date \\\"+%Y-%m-%d %H:%M:%S\\\") INFO: checking [\"secondfile\"] for corruption...\"\n                print \"md5sum -c ./triotrain/variant_calling/data/GIAB/bam/\"secondfile\".md5\"\n                print \"echo $(date \\\"+%Y-%m-%d %H:%M:%S\\\") INFO: checking [\"secondfile\"] for corruption... done\"\n\n                print \"echo ====================================================\"\n            }' \"./bam/${file_input}\"  &gt;&gt; \"./bam/${trio_name}.download\"\n    else\n        echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: file found | './triotrain/variant_calling/data/GIAB/bam/${trio_name}.download'\"\n    fi\n    }\n\n## Function for calculating AVG COVERAGE -----------\ncalc_cov () {\n    file_input=$1\n\n    # split the file_path into an array\n    IFS='_' read -r -a result &lt;&lt;&lt; \"$file_input\"\n    trio_name=${result[0]}\n\n    if [ ! -f \"./bam/${trio_name}.run\" ]; then\n        # echo \"source ./scripts/setup/modules.sh\" &gt; ./bam/${trio_name}.run\n\n        # Command Translation:\n        # For each line after the header row:\n        # First, use the first column in each row,\n        # from the .txt file input, and\n        # extract the BAM file path end, called \"filename\", using\n        # the shell cmd called \"basename\", then\n        # close that shell command\n\n        # Next, if \"filename\" containes the correct reference genome name,\n        # print a if/then statement to test if job file to run coverage \n        # calculations exists, and create it if it does not.\n\n        # print a if/then statement to test if output from avg_coverage \n        # calculations exists, and create it if it does not.\n\n        awk -F '\\t' 'NR!=1 { \n            cmd = \"basename \" $1 \n            cmd | getline filename\n            close(cmd)\n            }\n\n            index(filename, \"GRCh38\") {\n                cmd = \"basename \" filename \" .bam\"\n                cmd | getline label\n                close(cmd)\n\n                print \"if [ ! -f ./triotrain/variant_calling/data/GIAB/bam/\"label\".coverage.out ]; then\"\n                print \"    echo \\\"$(date \\\"+%Y-%m-%d %H:%M:%S\\\")  INFO: Calculating Coverage for [\"label\"] now...\\\"\" \n                print \"    samtools coverage ./triotrain/variant_calling/data/GIAB/bam/\"filename\" --output ./triotrain/variant_calling/data/GIAB/bam/\"label\".coverage.out\"\n                print \"    echo \\\"$(date \\\"+%Y-%m-%d %H:%M:%S\\\")  INFO: Calculating Coverage for [\"label\"] now... done\\\"\"\n                print \"else\"\n                print \"    echo \\\"$(date \\\"+%Y-%m-%d %H:%M:%S\\\")  INFO: bash file found | ./triotrain/variant_calling/data/GIAB/bam/\"label\".coverage.out\\\"\"\n                print \"fi\"\n                print \"echo ----------------------------------------------------\"\n                split(label, output, \".\")\n                print \"if [ ! -f ./triotrain/variant_calling/data/GIAB/bam/\"output[1]\".avg_coverage.out ]; then\"\n                print \"    echo \\\"$(date \\\"+%Y-%m-%d %H:%M:%S\\\")  INFO: Calculating Average Coverage for [\"output[1]\"] now...\\\"\" \n                print \"    awk '\\''{ total += $6; count++ } END { print \\\"\"label\" AVERAGE COVERAGE = \\\" total/count }'\\'' ./triotrain/variant_calling/data/GIAB/bam/\"label\".coverage.out &gt; ./triotrain/variant_calling/data/GIAB/bam/\"output[1]\".avg_coverage.out\"\n                print \"    echo \\\"$(date \\\"+%Y-%m-%d %H:%M:%S\\\")  INFO: Calculating Average Coverage for [\"output[1]\"] now... done\\\"\"\n                print \"else\"\n                print \"    echo \\\"$(date \\\"+%Y-%m-%d %H:%M:%S\\\")  INFO: output file found | ./triotrain/variant_calling/data/GIAB/bam/\"output[1]\".avg_coverage.out\\\"\"\n                print \"fi\" \n\n                print \"echo ====================================================\"\n                } ' \"./bam/${file_input}\"  &gt;&gt; \"./bam/${trio_name}.run\"\n\n        # if running on an interactive session with lots of memory, \n        # uncomment the line below\n        # . ./bam/$1.run\n    else\n        echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: file found | './triotrain/variant_calling/data/GIAB/bam/${trio_name}.run'\"\n    fi\n    }\n\n# output dir\nmkdir -p bam\n\n#-------------------------------------------------------------------#\n#                            GIAB Trio1                             #\n#-------------------------------------------------------------------#\n# BAM and BAI with MD5 checksums can be found here: https://github.com/genome-in-a-bottle/giab_data_indexes/blob/c4d3b95c2ebf14c175151e4723f82e8980722e90/AshkenazimTrio/alignment.index.AJtrio_Illumina_2x250bps_novoalign_GRCh37_GRCh38_NHGRI_06062016\n\n## CHECKSUMS -----------\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: downloading AJ Trio checksum now...\"\ncurl -s -C - https://raw.githubusercontent.com/genome-in-a-bottle/giab_data_indexes/master/AshkenazimTrio/alignment.index.AJtrio_Illumina_2x250bps_novoalign_GRCh37_GRCh38_NHGRI_06062016 -o ./bam/AJtrio_Illumina_2x250bps_novoaligns_GRCh37_GRCh38.txt \n\n# NOTE: 07 JUNE 2023:\n# The checksum for HG002 does not match the ^ above MD5,\n# therefore, download the correct one. \n\ncurl -s -C - https://ftp.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/HG002_NA24385_son/NIST_Illumina_2x250bps/novoalign_bams/HG002_corrected_md5sums.feb19upload.txt -o ./bam/HG002_corrected_md5sums.feb19upload.txt\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: downloading AJ Trio checksum now... done\"\n\ndownload \"AJtrio_Illumina_2x250bps_novoaligns_GRCh37_GRCh38.txt\"\n# calc_cov \"AJtrio_Illumina_2x250bps_novoaligns_GRCh37_GRCh38.txt\" \n\n#-------------------------------------------------------------------#\n#                            GIAB Trio2                             #\n#-------------------------------------------------------------------#\n# BAM and BAI with MD5 checksums can be found here: https://github.com/genome-in-a-bottle/giab_data_indexes/blob/master/ChineseTrio/alignment.index.ChineseTrio_Illumina300X100X_wgs_novoalign_GRCh37_GRCh38_NHGRI_04062016 \n\n## CHECKSUMS -----------\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: downloading HC Trio checksum now...\"\ncurl -s -C - https://raw.githubusercontent.com/genome-in-a-bottle/giab_data_indexes/master/ChineseTrio/alignment.index.ChineseTrio_Illumina300X100X_wgs_novoalign_GRCh37_GRCh38_NHGRI_04062016 -o ./bam/HCtrio_Illumina300X100X_wgs_novoalign_GRCh37_GRCh38.txt \necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: downloading HC Trio checksum now... done\"\n\ndownload \"HCtrio_Illumina300X100X_wgs_novoalign_GRCh37_GRCh38.txt\"\n# calc_cov \"HCtrio_Illumina300X100X_wgs_novoalign_GRCh37_GRCh38.txt\"\n\necho -e \"=== scripts/setup/download_humanGIABdata.sh &gt; end $(date)\"\n</code></pre> Check | Data Directories Run the following at the command line:<pre><code>ls triotrain/variant_calling/data/GIAB\n</code></pre> Expected new directories:<pre><code>allele_freq  bam  benchmark  reference\n</code></pre> Check | <code>allele_freq/</code> Run the following at the command line:<pre><code>ls triotrain/variant_calling/data/GIAB/allele_freq/\n</code></pre> Expected outputs:<pre><code>cohort-chr10.release_missing2ref.no_calls.vcf.gz      cohort-chr21.release_missing2ref.no_calls.vcf.gz.tbi\ncohort-chr10.release_missing2ref.no_calls.vcf.gz.tbi  cohort-chr22.release_missing2ref.no_calls.vcf.gz\ncohort-chr11.release_missing2ref.no_calls.vcf.gz      cohort-chr22.release_missing2ref.no_calls.vcf.gz.tbi\ncohort-chr11.release_missing2ref.no_calls.vcf.gz.tbi  cohort-chr2.release_missing2ref.no_calls.vcf.gz\ncohort-chr12.release_missing2ref.no_calls.vcf.gz      cohort-chr2.release_missing2ref.no_calls.vcf.gz.tbi\ncohort-chr12.release_missing2ref.no_calls.vcf.gz.tbi  cohort-chr3.release_missing2ref.no_calls.vcf.gz\ncohort-chr13.release_missing2ref.no_calls.vcf.gz      cohort-chr3.release_missing2ref.no_calls.vcf.gz.tbi\ncohort-chr13.release_missing2ref.no_calls.vcf.gz.tbi  cohort-chr4.release_missing2ref.no_calls.vcf.gz\ncohort-chr14.release_missing2ref.no_calls.vcf.gz      cohort-chr4.release_missing2ref.no_calls.vcf.gz.tbi\ncohort-chr14.release_missing2ref.no_calls.vcf.gz.tbi  cohort-chr5.release_missing2ref.no_calls.vcf.gz\ncohort-chr15.release_missing2ref.no_calls.vcf.gz      cohort-chr5.release_missing2ref.no_calls.vcf.gz.tbi\ncohort-chr15.release_missing2ref.no_calls.vcf.gz.tbi  cohort-chr6.release_missing2ref.no_calls.vcf.gz\ncohort-chr16.release_missing2ref.no_calls.vcf.gz      cohort-chr6.release_missing2ref.no_calls.vcf.gz.tbi\ncohort-chr16.release_missing2ref.no_calls.vcf.gz.tbi  cohort-chr7.release_missing2ref.no_calls.vcf.gz\ncohort-chr17.release_missing2ref.no_calls.vcf.gz      cohort-chr7.release_missing2ref.no_calls.vcf.gz.tbi\ncohort-chr17.release_missing2ref.no_calls.vcf.gz.tbi  cohort-chr8.release_missing2ref.no_calls.vcf.gz\ncohort-chr18.release_missing2ref.no_calls.vcf.gz      cohort-chr8.release_missing2ref.no_calls.vcf.gz.tbi\ncohort-chr18.release_missing2ref.no_calls.vcf.gz.tbi  cohort-chr9.release_missing2ref.no_calls.vcf.gz\ncohort-chr19.release_missing2ref.no_calls.vcf.gz      cohort-chr9.release_missing2ref.no_calls.vcf.gz.tbi\ncohort-chr19.release_missing2ref.no_calls.vcf.gz.tbi  cohort-chrX.release_missing2ref.no_calls.vcf.gz\ncohort-chr1.release_missing2ref.no_calls.vcf.gz       cohort-chrX.release_missing2ref.no_calls.vcf.gz.tbi\ncohort-chr1.release_missing2ref.no_calls.vcf.gz.tbi   cohort-chrY.release_missing2ref.no_calls.vcf.gz\ncohort-chr20.release_missing2ref.no_calls.vcf.gz      cohort-chrY.release_missing2ref.no_calls.vcf.gz.tbi\ncohort-chr20.release_missing2ref.no_calls.vcf.gz.tbi  concat_PopVCFs.sh\ncohort-chr21.release_missing2ref.no_calls.vcf.gz      PopVCF.merge.list\n</code></pre> Check | <code>bam/</code> Run the following at the command line:<pre><code>ls triotrain/variant_calling/data/GIAB/bam\n</code></pre> Expected outputs:<pre><code>AJtrio.download                                        HCtrio.download  AJtrio_Illumina_2x250bps_novoaligns_GRCh37_GRCh38.txt  HCtrio_Illumina300X100X_wgs_novoalign_GRCh37_GRCh38.txt\nHG002_corrected_md5sums.feb19upload.txt\n</code></pre> Check | <code>benchmark/</code> Run the following at the command line:<pre><code>ls triotrain/variant_calling/data/GIAB/benchmark/\n</code></pre> Expected outputs:<pre><code>HG002_GRCh38_1_22_v4.2.1_benchmark.bed         HG005_GRCh38_1_22_v4.2.1_benchmark.vcf.gz\nHG002_GRCh38_1_22_v4.2.1_benchmark.vcf.gz      HG005_GRCh38_1_22_v4.2.1_benchmark.vcf.gz.tbi\nHG002_GRCh38_1_22_v4.2.1_benchmark.vcf.gz.tbi  HG005_README_v4.2.1.txt\nHG002_README_v4.2.1.txt                      HG006_benchmark.md5\nHG003_GRCh38_1_22_v4.2.1_benchmark.bed         HG006_GRCh38_1_22_v4.2.1_benchmark.bed\nHG003_GRCh38_1_22_v4.2.1_benchmark.vcf.gz      HG006_GRCh38_1_22_v4.2.1_benchmark.vcf.gz\nHG003_GRCh38_1_22_v4.2.1_benchmark.vcf.gz.tbi  HG006_GRCh38_1_22_v4.2.1_benchmark.vcf.gz.tbi\nHG003_README_v4.2.1.txt                      HG006_README_v4.2.1.txt\nHG004_GRCh38_1_22_v4.2.1_benchmark.bed         HG007_benchmark.md5\nHG004_GRCh38_1_22_v4.2.1_benchmark.vcf.gz      HG007_GRCh38_1_22_v4.2.1_benchmark.bed\nHG004_GRCh38_1_22_v4.2.1_benchmark.vcf.gz.tbi  HG007_GRCh38_1_22_v4.2.1_benchmark.vcf.gz\nHG004_README_v4.2.1.txt                      HG007_GRCh38_1_22_v4.2.1_benchmark.vcf.gz.tbi\nHG005_benchmark.md5                          HG007_README_v4.2.1.txt\nHG005_GRCh38_1_22_v4.2.1_benchmark.bed\n</code></pre> Check | <code>reference/</code> Run the following at the command line:<pre><code>ls triotrain/variant_calling/data/GIAB/reference/\n</code></pre> Expected outputs:<pre><code>GRCh38_no_alt_analysis_set.fasta  GRCh38_no_alt_analysis_set.fasta.fai  md5checksums.txt\n</code></pre> Check | Processing Raw Data Scripts <p>In addition to the raw data, <code>download_GIAB.sh</code> also creates (3) bash scripts to process raw data into the formats expected by the tutorial:</p> <ol> <li><code>concat_PopVCFs.sh</code> + input file <code>PopVCF.merge.list</code> \u2014 merges the per-chr VCFs into a single file</li> <li><code>AJtrio.download</code> \u2014 downloads GIAB Trio1</li> <li><code>HCtrio.download</code> \u2014 downloads GIAB Trio2</li> </ol>"},{"location":"getting-started/walk-through/#6-process-raw-data","title":"6. Process Raw Data","text":"<p>Note</p> <p>These scripts can either be wrapped with SBATCH, or run interactively at the command line if you have enough memory. However, each script can take awhile to complete, particularly the <code>.download</code> scripts (1hr+).</p>"},{"location":"getting-started/walk-through/#a-merge-the-popvcf","title":"a. Merge the PopVCF","text":"<p>Warning | Download Size</p> <p>We need to create a single, genome-wide PopVCF from the raw per-chromosome PopVCF files. The per-chr Population VCFs were produced by the One Thousand Genomes Project (1kGP) and used to train the Human WGS.AF model. You can view the raw files on Google Cloud Platform.</p> Run the following at the command line:<pre><code>bash triotrain/variant_calling/data/GIAB/allele_freq/concat_PopVCFs.sh\n</code></pre> Example | <code>concat_PopVCFs.sh</code> <pre><code>source ./scripts/setup/modules.sh\nbcftools concat --file-list ./triotrain/variant_calling/data/GIAB/allele_freq/PopVCF.merge.list -Oz -o ./triotrain/variant_calling/data/GIAB/allele_freq/cohort.release_missing2ref.no_calls.vcf.gz\nbcftools index ./triotrain/variant_calling/data/GIAB/allele_freq/cohort.release_missing2ref.no_calls.vcf.gz\n</code></pre> Check Intermediate Data | <code>allele_freq/</code> Run the following at the command line:<pre><code>ls triotrain/variant_calling/data/GIAB/allele_freq/ | grep cohort.release\n</code></pre> Expected outputs:<pre><code>cohort.release_missing2ref.no_calls.vcf.gz\ncohort.release_missing2ref.no_calls.vcf.gz.csi\n</code></pre>"},{"location":"getting-started/walk-through/#b-download-sequence-data","title":"b. Download Sequence Data","text":"<p>Warning | Download Size</p> <p>Warning</p> <p>Given the large file size, the NIST FTP server runs slowly causing <code>curl</code> to timeout. You may need to run these scripts repeatedly until all data is transfered completely.</p> <p>We need to download the large sequence data files, and confirm they are not corrupted by checking the MD5 checksums. These <code>BAM/BAI</code> files orginate from the GIAB FTP site. An index of GIAB data created with these samples can be found on GitHub.</p> 1. Run the following at the command line:<pre><code>bash triotrain/variant_calling/data/GIAB/bam/AJtrio.download\n</code></pre> Example | <code>AJtrio.download</code> <pre><code>echo $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG002.GRCh38.2x250.bam] now...\ncurl -o ./triotrain/variant_calling/data/GIAB/bam/HG002.GRCh38.2x250.bam -C - ftp://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/HG002_NA24385_son/NIST_Illumina_2x250bps/novoalign_bams/HG002.GRCh38.2x250.bam --keepalive-time 300\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG002.GRCh38.2x250.bam]... done\necho 56c30eaa4e2f25ff0ac80ef30e09d78e   ./triotrain/variant_calling/data/GIAB/bam/HG002.GRCh38.2x250.bam &gt; ./triotrain/variant_calling/data/GIAB/bam/HG002.GRCh38.2x250.bam.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG002.GRCh38.2x250.bam] for corruption...\nmd5sum -c ./triotrain/variant_calling/data/GIAB/bam/HG002.GRCh38.2x250.bam.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG002.GRCh38.2x250.bam] for corruption... done\necho ----------------------------------------------------\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG002.GRCh38.2x250.bam.bai] now...\ncurl -o ./triotrain/variant_calling/data/GIAB/bam/HG002.GRCh38.2x250.bam.bai -C - ftp://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/HG002_NA24385_son/NIST_Illumina_2x250bps/novoalign_bams/HG002.GRCh38.2x250.bam.bai\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG002.GRCh38.2x250.bam.bai] ... done\necho a3c2b449df6509ca83fbd3fea22b9aee   ./triotrain/variant_calling/data/GIAB/bam/HG002.GRCh38.2x250.bam.bai &gt; ./triotrain/variant_calling/data/GIAB/bam/HG002.GRCh38.2x250.bam.bai.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG002.GRCh38.2x250.bam.bai] for corruption...\nmd5sum -c ./triotrain/variant_calling/data/GIAB/bam/HG002.GRCh38.2x250.bam.bai.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG002.GRCh38.2x250.bam.bai] for corruption... done\necho ====================================================\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG003.GRCh38.2x250.bam] now...\ncurl -o ./triotrain/variant_calling/data/GIAB/bam/HG003.GRCh38.2x250.bam -C - ftp://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/HG003_NA24149_father/NIST_Illumina_2x250bps/novoalign_bams/HG003.GRCh38.2x250.bam --keepalive-time 300\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG003.GRCh38.2x250.bam]... done\necho 1b1ad2e8f5eba062086890cceb9671ab   ./triotrain/variant_calling/data/GIAB/bam/HG003.GRCh38.2x250.bam &gt; ./triotrain/variant_calling/data/GIAB/bam/HG003.GRCh38.2x250.bam.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG003.GRCh38.2x250.bam] for corruption...\nmd5sum -c ./triotrain/variant_calling/data/GIAB/bam/HG003.GRCh38.2x250.bam.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG003.GRCh38.2x250.bam] for corruption... done\necho ----------------------------------------------------\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG003.GRCh38.2x250.bam.bai] now...\ncurl -o ./triotrain/variant_calling/data/GIAB/bam/HG003.GRCh38.2x250.bam.bai -C - ftp://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/HG003_NA24149_father/NIST_Illumina_2x250bps/novoalign_bams/HG003.GRCh38.2x250.bam.bai\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG003.GRCh38.2x250.bam.bai] ... done\necho a2697b3ebb9b5ac6d9a27734406a211c   ./triotrain/variant_calling/data/GIAB/bam/HG003.GRCh38.2x250.bam.bai &gt; ./triotrain/variant_calling/data/GIAB/bam/HG003.GRCh38.2x250.bam.bai.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG003.GRCh38.2x250.bam.bai] for corruption...\nmd5sum -c ./triotrain/variant_calling/data/GIAB/bam/HG003.GRCh38.2x250.bam.bai.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG003.GRCh38.2x250.bam.bai] for corruption... done\necho ====================================================\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG004.GRCh38.2x250.bam] now...\ncurl -o ./triotrain/variant_calling/data/GIAB/bam/HG004.GRCh38.2x250.bam -C - ftp://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/HG004_NA24143_mother/NIST_Illumina_2x250bps/novoalign_bams/HG004.GRCh38.2x250.bam --keepalive-time 300\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG004.GRCh38.2x250.bam]... done\necho e084422a267170b550c9704ad61db9b2   ./triotrain/variant_calling/data/GIAB/bam/HG004.GRCh38.2x250.bam &gt; ./triotrain/variant_calling/data/GIAB/bam/HG004.GRCh38.2x250.bam.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG004.GRCh38.2x250.bam] for corruption...\nmd5sum -c ./triotrain/variant_calling/data/GIAB/bam/HG004.GRCh38.2x250.bam.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG004.GRCh38.2x250.bam] for corruption... done\necho ----------------------------------------------------\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG004.GRCh38.2x250.bam.bai] now...\ncurl -o ./triotrain/variant_calling/data/GIAB/bam/HG004.GRCh38.2x250.bam.bai -C - ftp://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/HG004_NA24143_mother/NIST_Illumina_2x250bps/novoalign_bams/HG004.GRCh38.2x250.bam.bai\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG004.GRCh38.2x250.bam.bai] ... done\necho 4827d6457b202f85482787964a1bc6c7   ./triotrain/variant_calling/data/GIAB/bam/HG004.GRCh38.2x250.bam.bai &gt; ./triotrain/variant_calling/data/GIAB/bam/HG004.GRCh38.2x250.bam.bai.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG004.GRCh38.2x250.bam.bai] for corruption...\nmd5sum -c ./triotrain/variant_calling/data/GIAB/bam/HG004.GRCh38.2x250.bam.bai.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG004.GRCh38.2x250.bam.bai] for corruption... done\necho ====================================================\n</code></pre> Check Intermediate Data | HG002: Run the following at the command line:<pre><code>ls triotrain/variant_calling/data/GIAB/bam/ | grep HG002\n</code></pre> Expected outputs:<pre><code>HG002_corrected_md5sums.feb19upload.txt\nHG002.GRCh38.2x250.bam\nHG002.GRCh38.2x250.bam.bai\nHG002.GRCh38.2x250.bam.bai.md5\nHG002.GRCh38.2x250.bam.md5\n</code></pre> Check Intermediate Data | HG003: Run the following at the command line:<pre><code>ls triotrain/variant_calling/data/GIAB/bam/ | grep HG003\n</code></pre> Expected outputs:<pre><code>HG003.GRCh38.2x250.bam\nHG003.GRCh38.2x250.bam.bai\nHG003.GRCh38.2x250.bam.bai.md5\nHG003.GRCh38.2x250.bam.md5\n</code></pre> Check Intermediate Data | HG004: Run the following at the command line:<pre><code>ls triotrain/variant_calling/data/GIAB/bam/ | grep HG004\n</code></pre> Expected outputs:<pre><code>HG004.GRCh38.2x250.bam\nHG004.GRCh38.2x250.bam.bai\nHG004.GRCh38.2x250.bam.bai.md5\nHG004.GRCh38.2x250.bam.md5\n</code></pre> 2. Run the following at the command line:<pre><code>bash triotrain/variant_calling/data/GIAB/bam/HCtrio.download\n</code></pre> Example | <code>HCtrio.download</code> <pre><code>echo $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam] now...\ncurl -o ./triotrain/variant_calling/data/GIAB/bam/HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam -C - ftp://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/ChineseTrio/HG005_NA24631_son/HG005_NA24631_son_HiSeq_300x/NHGRI_Illumina300X_Chinesetrio_novoalign_bams/HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam --keepalive-time 300\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam]... done\necho 50080d14ba49462cfc6348e1fb41b5b3   ./triotrain/variant_calling/data/GIAB/bam/HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam &gt; ./triotrain/variant_calling/data/GIAB/bam/HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam] for corruption...\nmd5sum -c ./triotrain/variant_calling/data/GIAB/bam/HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam] for corruption... done\necho ----------------------------------------------------\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam.bai] now...\ncurl -o ./triotrain/variant_calling/data/GIAB/bam/HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam.bai -C - ftp://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/ChineseTrio/HG005_NA24631_son/HG005_NA24631_son_HiSeq_300x/NHGRI_Illumina300X_Chinesetrio_novoalign_bams/HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam.bai\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam.bai] ... done\necho 2d38162ba61e909d08e4ed438096174e   ./triotrain/variant_calling/data/GIAB/bam/HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam.bai &gt; ./triotrain/variant_calling/data/GIAB/bam/HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam.bai.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam.bai] for corruption...\nmd5sum -c ./triotrain/variant_calling/data/GIAB/bam/HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam.bai.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam.bai] for corruption... done\necho ====================================================\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam] now...\ncurl -o ./triotrain/variant_calling/data/GIAB/bam/HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam -C - ftp://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/ChineseTrio/HG006_NA24694-huCA017E_father/NA24694_Father_HiSeq100x/NHGRI_Illumina100X_Chinesetrio_novoalign_bams/HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam --keepalive-time 300\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam]... done\necho 3a7c239988862e5a4556eb8781058b1f   ./triotrain/variant_calling/data/GIAB/bam/HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam &gt; ./triotrain/variant_calling/data/GIAB/bam/HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam] for corruption...\nmd5sum -c ./triotrain/variant_calling/data/GIAB/bam/HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam] for corruption... done\necho ----------------------------------------------------\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai] now...\ncurl -o ./triotrain/variant_calling/data/GIAB/bam/HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai -C - ftp://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/ChineseTrio/HG006_NA24694-huCA017E_father/NA24694_Father_HiSeq100x/NHGRI_Illumina100X_Chinesetrio_novoalign_bams/HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai] ... done\necho 7bfe1f0988d27898befeaa4673d23a47   ./triotrain/variant_calling/data/GIAB/bam/HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai &gt; ./triotrain/variant_calling/data/GIAB/bam/HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai] for corruption...\nmd5sum -c ./triotrain/variant_calling/data/GIAB/bam/HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai] for corruption... done\necho ====================================================\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam] now...\ncurl -o ./triotrain/variant_calling/data/GIAB/bam/HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam -C - ftp://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/ChineseTrio/HG007_NA24695-hu38168_mother/NA24695_Mother_HiSeq100x/NHGRI_Illumina100X_Chinesetrio_novoalign_bams/HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam --keepalive-time 300\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam]... done\necho 3b8442105a4a45f71c3c1bda8af238dd   ./triotrain/variant_calling/data/GIAB/bam/HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam &gt; ./triotrain/variant_calling/data/GIAB/bam/HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam] for corruption...\nmd5sum -c ./triotrain/variant_calling/data/GIAB/bam/HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam] for corruption... done\necho ----------------------------------------------------\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai] now...\ncurl -o ./triotrain/variant_calling/data/GIAB/bam/HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai -C - ftp://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/ChineseTrio/HG007_NA24695-hu38168_mother/NA24695_Mother_HiSeq100x/NHGRI_Illumina100X_Chinesetrio_novoalign_bams/HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: downloading [HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai] ... done\necho 0c218cecd8cde9ad272de6d77bbd110f   ./triotrain/variant_calling/data/GIAB/bam/HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai &gt; ./triotrain/variant_calling/data/GIAB/bam/HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai] for corruption...\nmd5sum -c ./triotrain/variant_calling/data/GIAB/bam/HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai.md5\necho $(date \"+%Y-%m-%d %H:%M:%S\") INFO: checking [HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai] for corruption... done\necho ====================================================\n</code></pre> Check Intermediate Data | HG005: Run the following at the command line:<pre><code>ls triotrain/variant_calling/data/GIAB/bam/ | grep HG005\n</code></pre> Expected outputs:<pre><code>HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam\nHG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam.bai\nHG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam.bai.md5\nHG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam.md5\n</code></pre> Check Intermediate Data | HG006: Run the following at the command line:<pre><code>ls triotrain/variant_calling/data/GIAB/bam/ | grep HG006\n</code></pre> Expected outputs:<pre><code>HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam\nHG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai\nHG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai.md5\nHG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.md5\n</code></pre> Check Intermediate Data | HG007: Run the following at the command line:<pre><code>ls triotrain/variant_calling/data/GIAB/bam/ | grep HG007\n</code></pre> Expected outputs:<pre><code>HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam\nHG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai\nHG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.bai.md5\nHG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam.md5\n</code></pre>"},{"location":"getting-started/walk-through/#7-create-triotrain-inputs","title":"7. Create TrioTrain Inputs","text":"<p>There are (3) required input files we must create before we can run TrioTrain. Complete details about all required data can be found in the TrioTrain User Guide.</p>"},{"location":"getting-started/walk-through/#a-reference-dictionary-file-dict","title":"a. Reference Dictionary File (<code>.dict</code>)","text":"<p>Warning</p> <p>This step is specific to the Human reference genome GRCh38 since cattle-specific input files are pre-packaged with TrioTrain. If you are working with a new species, you will need to create this file for your reference genome.</p> <p>We need a reference dictionary file in the same directory as the reference genome. This file defines the valid genomic coordinates for TrioTrain's region shuffling. </p> <p>By default, region shuffling will only use the autosomes and X chromosome. However, you can expand or contract the shuffling area by providing an alternative region file for a particular trio by providing an existing <code>BED</code> file under the <code>RegionsFile</code> column within the metadata file (<code>.csv</code>).</p> Run the following at the command line:<pre><code>picard CreateSequenceDictionary \\\n--REFERENCE ./triotrain/variant_calling/data/GIAB/reference/GRCh38_no_alt_analysis_set.fasta \\\n--OUTPUT ./triotrain/variant_calling/data/GIAB/reference/GRCh38_no_alt_analysis_set.dict \\\n--SPECIES human\n</code></pre> Check | Dictionary File  Run the following at the command line:<pre><code>ls triotrain/variant_calling/data/GIAB/reference/ | grep .dict\n</code></pre> Expected output:<pre><code>GRCh38_no_alt_analysis_set.dict\n</code></pre>"},{"location":"getting-started/walk-through/#b-metadata-file-csv","title":"b. Metadata file (<code>.csv</code>)","text":"<p>We also need a metadata file to tell TrioTrain where to find all of previously downloaded Human GIAB data. This file contains pedigree information, and the absolute paths for file inputs. Absolute paths are required to help the Apptainer/Singularity containers identify local files. Formatting specifications for this required input can be found in the TrioTrain User Guide.</p> <p>For the tutorial, we've created a helper script to automatically create an example of this file. This script uses expectations of where the tutorial data are stored to add local paths. However, outside of the tutorial this file is a user-created input.</p> Run the following at the command line:<pre><code>source ./scripts/setup/modules.sh\nsource ./scripts/start_conda.sh                 # Ensure the previously built conda env is active\npython3 ./triotrain/model_training/tutorial/create_metadata.py\n</code></pre> Example | <code>create_metadata.py</code> <pre><code>#!/usr/bin/python3\n\"\"\"\ndescription: creates a tutorial metadata file from the Human GIAB data downloaded during the walk-through\nexample:\n    python3 triotrain/model_training/tutorial/create_metadata.py\n\"\"\"\n\nimport os\nfrom pathlib import Path\nfrom sys import path\n\nimport regex\n\n# get the absolute path to the triotrain/ dir\nabs_path = Path(__file__).resolve()\nmodule_path = str(abs_path.parent.parent.parent)\npath.append(module_path)\n\nfrom helpers.dictionary import add_to_dict\nfrom helpers.files import WriteFiles\nfrom helpers.utils import get_logger\nfrom helpers.wrapper import Wrapper, timestamp\n\n# Collect start time\nWrapper(__file__, \"start\").wrap_script(timestamp())\n\n# Create error log\ncurrent_file = os.path.basename(__file__)\nmodule_name = os.path.splitext(current_file)[0]\nlogger = get_logger(module_name)\n\ndefaults = {\n    \"RunOrder\": 1,\n    \"RunName\": \"Human_tutorial\",\n    \"ChildSampleID\": \"NA24385\",\n    \"ChildLabID\": \"HG002\",\n    \"FatherSampleID\": \"NA24149\",\n    \"FatherLabID\": \"HG003\",\n    \"MotherSampleID\": \"NA24695\",\n    \"MotherLabID\": \"HG004\",\n    \"ChildSex\": \"M\",\n    \"RefFASTA\": \"/triotrain/variant_calling/data/GIAB/reference/GRCh38_no_alt_analysis_set.fasta\",\n    \"PopVCF\": \"/triotrain/variant_calling/data/GIAB/allele_freq/cohort.release_missing2ref.no_calls.vcf.gz\",\n    \"RegionsFile\": \"NA\",\n    \"ChildReadsBAM\": \"/triotrain/variant_calling/data/GIAB/bam/HG002.GRCh38.2x250.bam\",\n    \"ChildTruthVCF\": \"/triotrain/variant_calling/data/GIAB/benchmark/HG002_GRCh38_1_22_v4.2.1_benchmark.vcf.gz\",\n    \"ChildCallableBED\": \"/triotrain/variant_calling/data/GIAB/benchmark/HG002_GRCh38_1_22_v4.2.1_benchmark_noinconsistent.bed\",\n    \"FatherReadsBAM\": \"/triotrain/variant_calling/data/GIAB/bam/HG003.GRCh38.2x250.bam\",\n    \"FatherTruthVCF\": \"/triotrain/variant_calling/data/GIAB/benchmark/HG003_GRCh38_1_22_v4.2.1_benchmark.vcf.gz\",\n    \"FatherCallableBED\": \"/triotrain/variant_calling/data/GIAB/benchmark/HG003_GRCh38_1_22_v4.2.1_benchmark_noinconsistent.bed\",\n    \"MotherReadsBAM\": \"/triotrain/variant_calling/data/GIAB/bam/HG004.GRCh38.2x250.bam\",\n    \"MotherTruthVCF\": \"/triotrain/variant_calling/data/GIAB/benchmark/HG004_GRCh38_1_22_v4.2.1_benchmark.vcf.gz\",\n    \"MotherCallableBED\": \"/triotrain/variant_calling/data/GIAB/benchmark/HG004_GRCh38_1_22_v4.2.1_benchmark_noinconsistent.bed\",\n    \"Test1ReadsBAM\": \"/triotrain/variant_calling/data/GIAB/bam/HG005.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.300x.bam\",\n    \"Test1TruthVCF\": \"/triotrain/variant_calling/data/GIAB/benchmark/HG005_GRCh38_1_22_v4.2.1_benchmark.vcf.gz\",\n    \"Test1CallableBED\": \"/triotrain/variant_calling/data/GIAB/benchmark/HG005_GRCh38_1_22_v4.2.1_benchmark.bed\",\n    \"Test2ReadsBAM\": \"/triotrain/variant_calling/data/GIAB/bam/HG006.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam\",\n    \"Test2TruthVCF\": \"/triotrain/variant_calling/data/GIAB/benchmark/HG006_GRCh38_1_22_v4.2.1_benchmark.vcf.gz\",\n    \"Test2CallableBED\": \"/triotrain/variant_calling/data/GIAB/benchmark/HG006_GRCh38_1_22_v4.2.1_benchmark.bed\",\n    \"Test3ReadsBAM\": \"/triotrain/variant_calling/data/GIAB/bam/HG007.GRCh38_full_plus_hs38d1_analysis_set_minus_alts.100x.bam\",\n    \"Test3TruthVCF\": \"/triotrain/variant_calling/data/GIAB/benchmark/HG007_GRCh38_1_22_v4.2.1_benchmark.vcf.gz\",\n    \"Test3CallableBED\": \"/triotrain/variant_calling/data/GIAB/benchmark/HG007_GRCh38_1_22_v4.2.1_benchmark.bed\",\n}\n\ncwd = Path.cwd()\noutput_dict = dict()\n\nfor k, v in defaults.items():\n    match = regex.search(r\"\\/triotrain\\/variant_calling\\/.*\", str(v))\n    if match:\n        add_to_dict(\n            update_dict=output_dict,\n            new_key=k,\n            new_val=f\"{cwd}{v}\",\n            logger=logger,\n            logger_msg=\"[tutorial]\",\n        )\n    else:\n        add_to_dict(\n            update_dict=output_dict,\n            new_key=k,\n            new_val=v,\n            logger=logger,\n            logger_msg=\"[tutorial]\",\n        )\n\noutput_file = WriteFiles(\n    path_to_file=str(cwd / \"triotrain\" / \"model_training\" / \"tutorial\"),\n    file=f\"GIAB.Human_tutorial_metadata.csv\",\n    logger=logger,\n    logger_msg=\"[tutorial]\",\n)\n\noutput_file.check_missing()\n\nif output_file.file_exists:\n    logger.info(\"[tutorial]: tutorial metadata file already exists... SKIPPING AHEAD\")\nelse:\n    logger.info(\"[tutorial]: creating a tutorial metadata file now...\")\n    output_file.add_rows(col_names=output_dict.keys(), data_dict=output_dict)\n    output_file.check_missing()\n    if output_file.file_exists:\n        logger.info(\"[tutorial]: successfully created the tutorial metadata file\")\n\n# Collect end time\nWrapper(__file__, \"start\").wrap_script(timestamp())\n</code></pre> Check | Tutorial Metadata File Run the following at the command line:<pre><code>ls triotrain/model_training/tutorial\n</code></pre> Expected output:<pre><code>create_metadata.py  estimate.py  GIAB.Human_tutorial_metadata.csv  __init__.py  resources_used.json\n</code></pre>"},{"location":"getting-started/walk-through/#c-slurm-resource-config-file-json","title":"c. SLURM Resource Config File (<code>.json</code>)","text":"<p>The last required input we need for TrioTrain is the SLURM resource config file (<code>.json</code>). This file tells TrioTrain what resources to request from your HPC cluster when submitting SLURM jobs. [</p> Example | Resource Config File triotrain/model_training/tutorial/resources_used.json<pre><code>{\n    \"make_examples\": {\n        \"partition\": \"hpc5,hpc6,BioCompute\",\n        \"nodes\": 1,\n        \"ntasks\": 40,\n        \"mem\": 379067,\n        \"CPUmem\": 9000,\n        \"time\": \"0-2:00:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"beam_shuffle\": {\n        \"partition\": \"hpc5,BioCompute\",\n        \"nodes\": 1,\n        \"ntasks\": 40,\n        \"mem\": 379067,\n        \"time\": \"0-2:00:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"re_shuffle\": {\n        \"partition\": \"BioCompute,Lewis\",\n        \"nodes\": 1,\n        \"ntasks\": 1,\n        \"mem\": \"200G\",\n        \"time\": \"0-10:00:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"train_eval\": {\n        \"partition\": \"gpu3\",\n        \"gres\": \"gpu:2\",\n        \"nodes\": 1,\n        \"ntasks\": 16,\n        \"mem\": \"0\",\n        \"time\": \"2-00:00:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"select_ckpt\": {\n        \"partition\": \"BioCompute,Lewis\",\n        \"nodes\": 1,\n        \"ntasks\": 1,\n        \"mem\": 500,\n        \"time\": \"0-00:30:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"call_variants\": {\n        \"partition\": \"hpc5,BioCompute\",\n        \"nodes\": 1,\n        \"ntasks\": 40,\n        \"mem\": 379067,\n        \"time\": \"2-00:00:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"compare_happy\": {\n        \"partition\": \"BioCompute,hpc5\",\n        \"nodes\": 1,\n        \"ntasks\": 40,\n        \"mem\": \"300G\",\n        \"time\": \"0-12:00:00\",\n        \"account\": \"biocommunity\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"convert_happy\": {\n        \"partition\": \"BioCompute,hpc3,hpc5,Lewis\",\n        \"nodes\": 1,\n        \"ntasks\": 24,\n        \"mem\": \"120G\",\n        \"time\": \"0-05:00:00\",\n        \"account\": \"biocommunity\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"show_examples\": {\n        \"partition\": \"BioCompute,Lewis\",\n        \"nodes\": 1,\n        \"mem\": \"1G\",\n        \"time\": \"0-02:00:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"summary\": {\n        \"partition\": \"hpc5,hpc6,Lewis\",\n        \"nodes\": 1,\n        \"ntasks\": 4,\n        \"mem\": \"40G\",\n        \"time\": \"0-10:00:00\",\n        \"account\": \"schnabellab\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    }\n}\n</code></pre> <p>The hardware listed above for each phase (e.g. <code>mem</code>, <code>ntasks</code> , <code>gpus</code>, etc.) vary, as some phases are memory intensive. These values should not be interpreted as the minimum or the optimum resources required for each phase. The MU Lewis Research Computing Cluster is heterogenous, the example config file requests resources to maximize the number of compute nodes when running memory-intensive phases.</p> <p>For the tutorial, copy the above example into a new file, and manually edit the SBATCH parameters to match your HPC cluster (i.e. changing the partition list, account, and email address). This new resource config file is passed to TrioTrain via <code>-r &lt;/path/to/new_file.json&gt;</code></p>"},{"location":"getting-started/walk-through/#8-run-shuffling-demo","title":"8. Run Shuffling Demo","text":"<p>Shuffling the labeled examples is a critical step to re-training DeepVariant because the model assumes successive training images are independent of one another. DeepVariant includes an Apache Beam pipeline that puts training examples in random genomic order. However, in our experience, getting the Python SDK for Beam, Apache Spark and SLURM to cooperate is a dependency nightmare.</p> <p>Our alternative approach, referred to as \"Region Shuffling\", splits the autosomes and the X chromosome into subset regions before making the labeled examples. Using the previously created <code>.dict</code> file created for the reference, TrioTrain will determine how many regions are required automatically.</p> <p>Warning</p> <p>For our analyses in bovine genomes, we exclude parts of the genome from our region shuffling, including:</p> <ol> <li> <p>the Y chromosome and the Mitochondrial genome \u2014 due to limitations with the <code>ARS-UCD1.2_Btau5.0.1Y</code> reference genome</p> </li> <li> <p>the unmapped reads \u2014  due to a large volume of contigs containing a small amount of variants that can not be easily distributed across 60-150+ shuffling regions</p> </li> </ol> <p>TrioTrain will automatically search the reference genome <code>.dict</code> file for contigs labeled with <code>Y</code> and <code>M/MT</code> and will ignore them prior to defining shuffling regions.</p> <p>Use the <code>--unmapped-reads</code> flag to provide a contig prefix pattern to exclude. The default value (NKLS) is approprate for the <code>ARS-UCD1.2_Btau5.0.1Y</code> reference genome.</p> Note | Identifying Contig Labels Run the following at the command line:<pre><code>cat ARS-UCD1.2_Btau5.0.1Y.dict | awk '{if($1 ~ \"@SQ\") print $2}' | cut -c4-7 | sort | uniq -c | sort -k1\n</code></pre> Check output<pre><code>    1 1\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 2\n1 20\n1 21\n1 22\n1 23\n1 24\n1 25\n1 26\n1 27\n1 28\n1 29\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 MT\n    1 X\n    1 Y\n    2180 NKLS\n</code></pre> <p>A shuffling region is defined in a non-overlapping, 0-based <code>BED</code> file. The goal is to create a subset of labeled examples which are representative of the whole genome, yet small enough to be shuffled within the memory of a single compute node. After defining the shuffling regions, labeled and shuffled examples are created by running parallel SLURM jobs. In our testing with bovine genomes, constraining each region to produce ~200,000 labeled examples works well.</p> <p>In our experience, numerous small jobs running quickly minimizes wall time between phases. We also priorize a large number of regions, as this further increases the randomness during the final <code>re_shuffle</code> processes that randomizes the order regions are given to the model.</p> Example | Computing Power <p>Given ~370G mem across 40 cores, DeepVariant will shuffle each region's examples in around 6 minutes, which can be submitted in parallel to reduce wall time.</p> Note | Output Volume <p>A typical cattle genome with ~8 million variants results in around ~65 regions, resulting in (65 regions x 40 cores) tfrecord output files. TrioTrain repeats this process for shuffling, resulting in another (65 regions x 40 cores) shuffled tfrecord output files. This is repeated for all 3 genomes within a trio resulting in a large volume of individual files (65 regions x 40 cores x 2 phases per genome).</p> <p>The final step of our approach, referrred to as <code>re_shuffle</code>, condenses the 40 tfrecord files for a region, reducing the number of files fed to DeepVariant per genome back down to 65. To further improve shuffling, we randomize the order regions are provided to DeepVariant.</p> <p>If your species of interest produces a large volume of variants (&gt; 8 million / genome), TrioTrain can easily overload your cluster's I/O capabilities, or write more than 10,000 files to a directory, or overwhelm the SLURM scheduler by submitting thousands of jobs simultaneously. Future versions of TrioTrain will address these challenges, but proceed with caution; your cluster's SysAdmin will thank you!</p> <p>This shuffling demo enables you to adjust TrioTrain's parameters for estimating how many shuffling regions to use for each genome. The two primary flags which control Region Shuffling are:</p> <ol> <li> <p><code>--max-examples</code> \u2014 defines the upper limit of total number of examples to produce for each region; values greater than the default (200,000) will increase the wall time.</p> </li> <li> <p><code>--est-examples</code> \u2014 defines expectations of the number of examples DeepVariant produces per genomic variant; the default value (1.5) is appropriate for bovine genomes, but with the human GIAB samples, we found a value of 1 to be more appropriate.</p> </li> </ol> <p>Additionally, TrioTrain bases the Region Shuffling calculations on the total number of variants found in each genome. This value can vary drastically across training genomes, so TrioTrain uses the number of PASS variants within the corresponding TruthVCF. A larger number of truth variants results in more regions made per region.</p> <p>Before running TrioTrain in a new mamalian genome or on a new HPC cluster, we strongly recommend completing the region shuffling demo using the smallest chromosome possible using the <code>--demo-chr=&lt;region_literal&gt;</code> flag.</p> Note | Working in Other Species <p>The appropriate values for <code>max-examples</code> and <code>est-examples</code> may vary widely across species, as the number of examples DeepVariant produces depends on several factors including:</p> <ul> <li> <p>genome size</p> </li> <li> <p>the reference genome used</p> </li> <li> <p>how many variants are identified in an individual genome</p> </li> </ul> <p>For example, the F1-hybrid offspring in cattle are crosses between diverent lineages, resulting in an abnormal amount heterzygous genotypes compared to typical cattle genomes. Instead of typical 8 million variants per genome, these samples produced 20+ million variants per genome.</p> <p>For this tutorial, complete the demo for Human genomes by editing the following at the command to include your new SLURM config file:</p> Run the following at the command line:<pre><code># You can add the --dry-run flag to this command to confirm the TrioTrain pipeline runs smoothly before submitting jobs to the queue\nsource ./scripts/setup/modules.sh\nsource ./scripts/start_conda.sh                 # Ensure the previously built conda env is active\npython3 triotrain/run_trio_train.py                                                                         \\\n-g Father                                                                                               \\\n--unmapped-reads chrUn                                                                                  \\\n-m triotrain/model_training/tutorial/GIAB.Human_tutorial_metadata.csv                                   \\\n-n demo                                                                                                 \\\n--demo-mode                                                                                             \\\n--demo-chr chr21                                                                                        \\\n--num-tests 3                                                                                           \\\n--custom-checkpoint triotrain/model_training/pretrained_models/v1.4.0_withIS_withAF/wgs_af.model.ckpt   \\\n--output ../TUTORIAL                                                                                    \\\n-r &lt;/path/to/new_file.json&gt;\n</code></pre> <p>This demo will produce and submit the following SLURM jobs:</p> <ol> <li><code>make_examples</code> \u2014 for both Father &amp; Child</li> <li><code>beam_shuffle</code> \u2014 for both Father &amp; Child</li> <li><code>re_shuffle</code> \u2014 for both Father &amp; Child</li> <li><code>call_variants</code> \u2014 for just the Father</li> </ol> <p>There are (6) types of output files from running the demo:</p> File Extension Number of Files (Shards) Genome Used <code>labeled.tfrecords*.gz</code> N Father, Child <code>labeled.tfrecords*.gz.example_info.json</code> N Father, Child <code>labeled.shuffled*.tfrecord.gz</code> N Father, Child <code>labeled.shuffled.dataset_config.pbtxt</code> 1 Father, Child <code>labeled.shuffled.merged.dataset_config.pbtxt</code> 1 Father, Child <code>labeled.shuffled.merged.tfrecord.gz</code> 1 Father, Child N = number of CPUs requested in your <code>resources_used.json</code> file, shards are numbered 0 \u2014 (N - 1). Expected Output | Father Shuffling: Run the following at the command line:<pre><code>ls ../TUTORIAL/demo/Human_tutorial/examples/ | grep Father\n</code></pre> Check output<pre><code>Father.chr21.labeled.shuffled-00000-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00001-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00002-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00003-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00004-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00005-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00006-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00007-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00008-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00009-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00010-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00011-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00012-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00013-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00014-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00015-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00016-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00017-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00018-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00019-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00020-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00021-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00022-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00023-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00024-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00025-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00026-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00027-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00028-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00029-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00030-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00031-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00032-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00033-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00034-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00035-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00036-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00037-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00038-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled-00039-of-00040.tfrecord.gz\nFather.chr21.labeled.shuffled.dataset_config.pbtxt\nFather.chr21.labeled.tfrecords-00000-of-00040.gz\nFather.chr21.labeled.tfrecords-00000-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00001-of-00040.gz\nFather.chr21.labeled.tfrecords-00001-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00002-of-00040.gz\nFather.chr21.labeled.tfrecords-00002-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00003-of-00040.gz\nFather.chr21.labeled.tfrecords-00003-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00004-of-00040.gz\nFather.chr21.labeled.tfrecords-00004-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00005-of-00040.gz\nFather.chr21.labeled.tfrecords-00005-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00006-of-00040.gz\nFather.chr21.labeled.tfrecords-00006-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00007-of-00040.gz\nFather.chr21.labeled.tfrecords-00007-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00008-of-00040.gz\nFather.chr21.labeled.tfrecords-00008-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00009-of-00040.gz\nFather.chr21.labeled.tfrecords-00009-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00010-of-00040.gz\nFather.chr21.labeled.tfrecords-00010-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00011-of-00040.gz\nFather.chr21.labeled.tfrecords-00011-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00012-of-00040.gz\nFather.chr21.labeled.tfrecords-00012-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00013-of-00040.gz\nFather.chr21.labeled.tfrecords-00013-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00014-of-00040.gz\nFather.chr21.labeled.tfrecords-00014-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00015-of-00040.gz\nFather.chr21.labeled.tfrecords-00015-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00016-of-00040.gz\nFather.chr21.labeled.tfrecords-00016-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00017-of-00040.gz\nFather.chr21.labeled.tfrecords-00017-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00018-of-00040.gz\nFather.chr21.labeled.tfrecords-00018-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00019-of-00040.gz\nFather.chr21.labeled.tfrecords-00019-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00020-of-00040.gz\nFather.chr21.labeled.tfrecords-00020-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00021-of-00040.gz\nFather.chr21.labeled.tfrecords-00021-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00022-of-00040.gz\nFather.chr21.labeled.tfrecords-00022-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00023-of-00040.gz\nFather.chr21.labeled.tfrecords-00023-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00024-of-00040.gz\nFather.chr21.labeled.tfrecords-00024-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00025-of-00040.gz\nFather.chr21.labeled.tfrecords-00025-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00026-of-00040.gz\nFather.chr21.labeled.tfrecords-00026-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00027-of-00040.gz\nFather.chr21.labeled.tfrecords-00027-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00028-of-00040.gz\nFather.chr21.labeled.tfrecords-00028-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00029-of-00040.gz\nFather.chr21.labeled.tfrecords-00029-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00030-of-00040.gz\nFather.chr21.labeled.tfrecords-00030-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00031-of-00040.gz\nFather.chr21.labeled.tfrecords-00031-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00032-of-00040.gz\nFather.chr21.labeled.tfrecords-00032-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00033-of-00040.gz\nFather.chr21.labeled.tfrecords-00033-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00034-of-00040.gz\nFather.chr21.labeled.tfrecords-00034-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00035-of-00040.gz\nFather.chr21.labeled.tfrecords-00036-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00037-of-00040.gz\nFather.chr21.labeled.tfrecords-00037-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00038-of-00040.gz\nFather.chr21.labeled.tfrecords-00038-of-00040.gz.example_info.json\nFather.chr21.labeled.tfrecords-00039-of-00040.gz\nFather.chr21.labeled.tfrecords-00039-of-00040.gz.example_info.json\n</code></pre> <p>Confirm that SLURM jobs completed successfully Run the following at the command line:<pre><code>cat ../TUTORIAL/demo/Human_tutorial/logs/tracking-Baseline-v1.4.0.log | grep SUCCESS | grep Father | wc -l\n</code></pre></p> Check output<pre><code>41\n</code></pre> Expected Output | Child Shuffling: Run the following at the command line:<pre><code>ls ../TUTORIAL/demo/Human_tutorial/examples/ | grep Child\n</code></pre> Check output<pre><code>Child.chr21.labeled.shuffled-00000-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00001-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00002-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00003-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00004-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00005-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00006-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00007-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00008-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00009-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00010-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00011-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00012-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00013-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00014-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00015-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00016-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00017-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00018-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00019-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00020-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00021-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00022-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00023-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00024-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00025-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00026-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00027-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00028-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00029-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00030-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00031-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00032-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00033-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00034-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00035-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00036-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00037-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00038-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled-00039-of-00040.tfrecord.gz\nChild.chr21.labeled.shuffled.dataset_config.pbtxt\nChild.chr21.labeled.tfrecords-00000-of-00040.gz\nChild.chr21.labeled.tfrecords-00000-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00001-of-00040.gz\nChild.chr21.labeled.tfrecords-00001-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00002-of-00040.gz\nChild.chr21.labeled.tfrecords-00002-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00003-of-00040.gz\nChild.chr21.labeled.tfrecords-00003-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00004-of-00040.gz\nChild.chr21.labeled.tfrecords-00004-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00005-of-00040.gz\nChild.chr21.labeled.tfrecords-00005-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00006-of-00040.gz\nChild.chr21.labeled.tfrecords-00006-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00007-of-00040.gz\nChild.chr21.labeled.tfrecords-00007-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00008-of-00040.gz\nChild.chr21.labeled.tfrecords-00008-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00009-of-00040.gz\nChild.chr21.labeled.tfrecords-00009-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00010-of-00040.gz\nChild.chr21.labeled.tfrecords-00010-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00011-of-00040.gz\nChild.chr21.labeled.tfrecords-00011-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00012-of-00040.gz\nChild.chr21.labeled.tfrecords-00012-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00013-of-00040.gz\nChild.chr21.labeled.tfrecords-00013-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00014-of-00040.gz\nChild.chr21.labeled.tfrecords-00014-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00015-of-00040.gz\nChild.chr21.labeled.tfrecords-00015-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00016-of-00040.gz\nChild.chr21.labeled.tfrecords-00016-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00017-of-00040.gz\nChild.chr21.labeled.tfrecords-00017-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00018-of-00040.gz\nChild.chr21.labeled.tfrecords-00018-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00019-of-00040.gz\nChild.chr21.labeled.tfrecords-00019-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00020-of-00040.gz\nChild.chr21.labeled.tfrecords-00020-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00021-of-00040.gz\nChild.chr21.labeled.tfrecords-00021-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00022-of-00040.gz\nChild.chr21.labeled.tfrecords-00022-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00023-of-00040.gz\nChild.chr21.labeled.tfrecords-00023-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00024-of-00040.gz\nChild.chr21.labeled.tfrecords-00024-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00025-of-00040.gz\nChild.chr21.labeled.tfrecords-00025-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00026-of-00040.gz\nChild.chr21.labeled.tfrecords-00026-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00027-of-00040.gz\nChild.chr21.labeled.tfrecords-00027-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00028-of-00040.gz\nChild.chr21.labeled.tfrecords-00028-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00029-of-00040.gz\nChild.chr21.labeled.tfrecords-00029-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00030-of-00040.gz\nChild.chr21.labeled.tfrecords-00030-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00031-of-00040.gz\nChild.chr21.labeled.tfrecords-00031-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00032-of-00040.gz\nChild.chr21.labeled.tfrecords-00032-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00033-of-00040.gz\nChild.chr21.labeled.tfrecords-00033-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00034-of-00040.gz\nChild.chr21.labeled.tfrecords-00034-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00035-of-00040.gz\nChild.chr21.labeled.tfrecords-00035-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00036-of-00040.gz\nChild.chr21.labeled.tfrecords-00036-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00037-of-00040.gz\nChild.chr21.labeled.tfrecords-00037-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00038-of-00040.gz\nChild.chr21.labeled.tfrecords-00038-of-00040.gz.example_info.json\nChild.chr21.labeled.tfrecords-00039-of-00040.gz\nChild.chr21.labeled.tfrecords-00039-of-00040.gz.example_info.json\n</code></pre> <p>Confirm that SLURM jobs completed successfully Run the following at the command line:<pre><code>cat ../TUTORIAL/demo/Human_tutorial/logs/tracking-Baseline-v1.4.0.log | grep SUCCESS | grep Child | wc -l\n</code></pre></p> Check output<pre><code>41\n</code></pre> Expected Output | Benchmarking: Run the following at the command line:<pre><code>less ../TUTORIAL/demo/summary/Human_tutorial.SLURM.job_numbers.csv\n</code></pre> Check output<pre><code>AnalysisName,RunName,Parent,Phase,JobList\nBaseline-v1.4.0,Human_tutorial,Father,make_examples,27669522\nBaseline-v1.4.0,Human_tutorial,Father,beam_shuffle,27669523\nBaseline-v1.4.0,Human_tutorial,Father,make_examples,27669524\nBaseline-v1.4.0,Human_tutorial,Father,beam_shuffle,27669525\n# The JobList column will differ based on SLURM job numbers\n</code></pre> <p>The following will provide a conservative estimate for the <code>--max-examples</code> and <code>--est-examples</code> parameters to ensure shuffling easily fits within your available memory.</p> Run the following at the command line:<pre><code>source ./scripts/setup/modules.sh\nsource ./scripts/start_conda.sh                 # Ensure the previously built conda env is active\npython3 triotrain/model_training/tutorial/estimate.py                           \\\n--vcf-file ../TUTORIAL/demo/Human_tutorial/test_Father/test1_chr21.vcf.gz   \\\n-g Father                                                                   \\\n--demo-mode                                                                 \\\n--env-file ../TUTORIAL/demo/envs/run1.env\n</code></pre> Expected Output | Estimating TrioTrain Parameters: <pre><code>===== start of triotrain/model_training/tutorial/estimate.py @ 2023-06-29  11:25:27 =====\n2023-06-29 11:25:27 AM - [INFO] - [DEMO] - [TRIO1] - [count_variants] - [Father]: number of REF/REF variants found | 44,452\n2023-06-29 11:25:27 AM - [INFO] - [DEMO] - [TRIO1] - [count_variants] - [Father]: number of PASS variants found | 114,332\n2023-06-29 11:25:28 AM - [INFO] - [DEMO] - [TRIO1] - [count_variants] - [Father]: default maximum examples per region | 200,000\n2023-06-29 11:25:28 AM - [INFO] - [DEMO] - [TRIO1] - [count_variants] - [Father]: default value for --max-examples is appropriate\n2023-06-29 11:25:28 AM - [INFO] - adding Demo_TotalVariants='114332'\n2023-06-29 11:25:28 AM - [INFO] - [DEMO] - [TRIO1] - [count_variants] - [Father]: added 'Demo_TotalVariants=114332' to env file\n2023-06-29 11:25:28 AM - [INFO] - [DEMO] - [TRIO1] - [count_variants] - [Father]: number of examples made | 75,902\n2023-06-29 11:25:28 AM - [INFO] - [DEMO] - [TRIO1] - [count_variants] - [Father]: calculated examples per variant | 0.664\n2023-06-29 11:25:28 AM - [INFO] - [DEMO] - [TRIO1] - [count_variants] - [Father]: prevent underestimating which creates too many examples per region by rounding up to the nearest 0.5 | 1.0\n2023-06-29 11:25:28 AM - [INFO] - [DEMO] - [TRIO1] - [count_variants] - [Father]: default examples per variant | 1.5\n2023-06-29 11:25:28 AM - [INFO] - [DEMO] - [TRIO1] - [count_variants] - [Father]: difference between default and calculated examples per variant | 0.836\n2023-06-29 11:25:28 AM - [INFO] - [DEMO] - [TRIO1] - [count_variants] - [Father]: when running TrioTrain outside of this tutorial, please use '--est-examples=1.0'\n2023-06-29 11:25:28 AM - [INFO] - adding Est_Examples='1.0'\n2023-06-29 11:25:28 AM - [INFO] - [DEMO] - [TRIO1] - [count_variants] - [Father]: added 'Est_Examples=1.0' to env file\n===== end of triotrain/model_training/tutorial/estimate.py @ 2023-06-29  11:25:28 =====\n</code></pre>"},{"location":"getting-started/walk-through/#9-run-triotrain-with-a-human-trio","title":"9. Run TrioTrain with a Human Trio","text":"<p>Now that we know how to tailor TrioTrain for our non-bovine species (human), we can move forward with starting the re-training pipeline.</p> <p>Complete the GIAB TrioTrain by editing the following at the command to include your new SLURM config file:</p> Run the following at the command line:<pre><code># You can add the --dry-run flag to this command to confirm the TrioTrain pipeline runs smoothly prior to submitting jobs to the queue\nsource ./scripts/setup/modules.sh\nsource ./scripts/start_conda.sh                 # Ensure the previously built conda env is active\npython3 triotrain/run_trio_train.py                                                                         \\\n-g Father                                                                                               \\\n--unmapped-reads chrUn                                                                                  \\\n--est-examples 1                                                                                        \\\n-m triotrain/model_training/tutorial/GIAB.Human_tutorial_metadata.csv                                   \\\n-n GIAB_Trio                                                                                            \\\n--num-tests 3                                                                                           \\\n--custom-checkpoint triotrain/model_training/pretrained_models/v1.4.0_withIS_withAF/wgs_af.model.ckpt   \\\n--output ../TUTORIAL                                                                                    \\\n--benchmark                                                                                             \\\n-r &lt;/path/to/new_file.json&gt;\n</code></pre> <p>Need to Re-Submit a SLURM job </p> Check | Baseline WGS.AF: Run the following at the command line:<pre><code>ls ../TUTORIAL/baseline_v1.4.0_withIS_withAF/ | grep total | grep total\n</code></pre> Expected outputs:<pre><code>Test1.total.metrics.csv\nTest2.total.metrics.csv\nTest3.total.metrics.csv\n</code></pre> Check | Father: Run the following at the command line:<pre><code>ls ../TUTORIAL/GIAB_Trio/Human_tutorial/compare_Father/ | grep total\n</code></pre> Expected outputs:<pre><code>Test1.total.metrics.csv\nTest2.total.metrics.csv\nTest3.total.metrics.csv\n</code></pre> Check | Mother: Run the following at the command line:<pre><code>ls ../TUTORIAL/GIAB_Trio/Human_tutorial/compare_Mother/ | grep total\n</code></pre> Expected outputs:<pre><code>Test1.total.metrics.csv\nTest2.total.metrics.csv\nTest3.total.metrics.csv\n</code></pre>"},{"location":"getting-started/walk-through/#merge-results-per-iteration","title":"Merge Results | Per-Iteration","text":"<p>Each <code>Test#.total.metrics.csv</code> output file should contain 57 rows and 2 columns. The metrics within are the raw and proprotional performance metrics from hap.py. After all <code>convert_happy</code> jobs complete, we will separately merge the results from running the baseline iteration, and both training iterations completed during the GIAB tutorial:</p> Run the following at the command line:<pre><code>source ./scripts/setup/modules.sh\nsource ./scripts/start_conda.sh                 # Ensure the previously built conda env is active\nfor start_i in $(seq 0 1); do\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: merging processed results from hap.py for GIAB run#${start_i}\"\npython3 triotrain/summarize/merge_results.py --env ../TUTORIAL/GIAB_Trio/envs/run${start_i}.env -g Father -m triotrain/summarize/data/tutorial_metadata.csv\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: finished merging processed results from hap.py for GIAB run#${start_i}\"\ndone\n</code></pre> Check | Baseline WGS.AF Run the following at the command line:<pre><code>ls ../TUTORIAL/baseline_v1.4.0_withIS_withAF/ | grep All\n</code></pre> Expected outputs:<pre><code>DV1.4_WGS.AF_human.AllTests.total.metrics.csv\n</code></pre> Check | GIAB Trio1 Run the following at the command line:<pre><code>ls ../TUTORIAL/GIAB_Trio/summary | grep All\n</code></pre> Expected outputs:<pre><code>Trio1.AllTests.total.metrics.csv\n</code></pre>"},{"location":"getting-started/walk-through/#clean-up-directories-per-iteration","title":"Clean Up Directories | Per-Iteration","text":"<p>Running TrioTrain produces a large volume of temporary files. Run the following at the command line to free up space:</p> Run the following at the command line:<pre><code>source ./scripts/setup/modules.sh\nsource ./scripts/start_conda.sh                 # Ensure the previously built conda env is active\nfor start_i in $(seq 0 1); do\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: removing temp files for GIAB run#${start_i}\"\npython3 triotrain/model_training/slurm/clean_tmp.py --env ../TUTORIAL/GIAB_Trio/envs/run${start_i}.env\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') INFO: finished removing temp files for GIAB run#${start_i}\"\ndone\n</code></pre> Check | Baseline WGS.AF Run the following at the command line:<pre><code>du -h ../TUTORIAL/baseline_v1.4.0_withIS_withAF/\n</code></pre> Expected outputs:<pre><code>700M    ../TUTORIAL/baseline_v1.4.0_withIS_withAF/\n</code></pre> Check | GIAB Trio1 Run the following at the command line:<pre><code>du -h ../TUTORIAL/GIAB_Trio\n``\n```bash title=\"Expected outputs:\"\n141M    ../TUTORIAL/GIAB_Trio/Human_tutorial/logs\n402M    ../TUTORIAL/GIAB_Trio/Human_tutorial/compare_Mother\n1.1M    ../TUTORIAL/GIAB_Trio/Human_tutorial/train_Mother/eval_Child\n23G     ../TUTORIAL/GIAB_Trio/Human_tutorial/train_Mother\n394M    ../TUTORIAL/GIAB_Trio/Human_tutorial/test_Father\n298M    ../TUTORIAL/GIAB_Trio/Human_tutorial/compare_Father\n1.1M    ../TUTORIAL/GIAB_Trio/Human_tutorial/train_Father/eval_Child\n23G     ../TUTORIAL/GIAB_Trio/Human_tutorial/train_Father\n243G    ../TUTORIAL/GIAB_Trio/Human_tutorial/examples\n391M    ../TUTORIAL/GIAB_Trio/Human_tutorial/test_Mother\n3.1M    ../TUTORIAL/GIAB_Trio/Human_tutorial/jobs\n290G    ../TUTORIAL/GIAB_Trio/Human_tutorial\n100K    ../TUTORIAL/GIAB_Trio/summary\n50K     ../TUTORIAL/GIAB_Trio/envs\n290G    ../TUTORIAL/GIAB_Trio/\n</code></pre> <p>Next - Comparing Models </p>"},{"location":"user-guide/citation/","title":"How to cite","text":"<p>Citation to go here (FIX ME)</p> <p>Please also cite:</p> <p>A universal SNP and small-indel variant caller using deep neural networks. Nature Biotechnology 36, 983\u2013987 (2018).  Ryan Poplin, Pi-Chuan Chang, David Alexander, Scott Schwartz, Thomas Colthurst, Alexander Ku, Dan Newburger, Jojo Dijamco, Nam Nguyen, Pegah T. Afshar, Sam S. Gross, Lizzie Dorfman, Cory Y. McLean, and Mark A. DePristo. doi: https://doi.org/10.1038/nbt.4235</p>"},{"location":"user-guide/compute/","title":"Computing Resources Used","text":""},{"location":"user-guide/compute/#human-giab-tutorial","title":"Human GIAB Tutorial","text":"<pre><code># Check the resources for a specific node\nscontrol show node &lt;node_name&gt;\n\n# Output ---------\nNodeName=&lt;node_name&gt; Arch=x86_64 CoresPerSocket=28\nCPUAlloc=56 CPUErr=0 CPUTot=56 CPULoad=0.68\n    AvailableFeatures=(null)\nActiveFeatures=(null)\nGres=(null)\nNodeAddr=&lt;node_name&gt; NodeHostName=&lt;node_name&gt; Version=17.02\n    OS=Linux RealMemory=509577 AllocMem=509577 FreeMem=256579 Sockets=2 Boards=1\nState=ALLOCATED ThreadsPerCore=2 TmpDisk=0 Weight=1 Owner=N/A MCS_label=N/A\n    Partitions=&lt;partition_name&gt;,General  CfgTRES=cpu=56,mem=509577M\n    AllocTRES=cpu=56,mem=509577M\n    CapWatts=n/a\n    CurrentWatts=0 LowestJoules=0 ConsumedJoules=0\nExtSensorsJoules=n/s ExtSensorsWatts=0 ExtSensorsTemp=n/s\n</code></pre>"},{"location":"user-guide/existing_models/","title":"Existing DeepVariant Models","text":"<p>The following models are compatible with TrioTrain.</p>"},{"location":"user-guide/existing_models/#deepvariant-wgs","title":"DeepVariant WGS","text":"Species Version Shape Channels Model Source Human v1.4 <code>height=100; width=221; n_channels=7</code> <code>1-6,19</code> Insert Size model"},{"location":"user-guide/existing_models/#deepvariant-wgsaf","title":"DeepVariant WGS.AF","text":"Species Version Shape Channels Model Source Human v1.4 <code>height=100; width=221; n_channels=8</code> <code>1-6,8,19</code> Allele Frequency model Bovine v1.4 <code>height=100; width=221; n_channels=8</code> <code>1-6,8,19</code> Custom Allel Frequency model"},{"location":"user-guide/get-help/","title":"Get Help","text":"<p>See the User Guide for more complete documentation of all of TrioTrain's features.</p>"},{"location":"user-guide/get-help/#feedback-and-technical-support","title":"Feedback and technical support","text":"<p>To get help with TrioTrain, please use the [GitHub discussions] or GitHub issues.</p> <p>For technical feedback, feel free to reach out to Jenna Kalleberg at jakth2@mail.missouri.org.</p>"},{"location":"user-guide/get-help/#contributing-to-triotrain","title":"Contributing to TrioTrain","text":"<p>Please open a Github pull request if you wish to contribute to TrioTrain.</p>"},{"location":"user-guide/mie/","title":"Using Mendenian Inheritance Expectations to Assess Models","text":"<p>If you have trio-binned test genomes, TrioTrain can help calculate Mendelian Inheritance Error rate using <code>rtg-tools mendelian</code>. However, you must create a Sequence Data File (SDF) for each reference genome in the same directory as the reference genome in a sub-directory called <code>rtg_tools/</code>. Additional details about <code>rtg-tools</code> can be found on GitHub, or by reviewing the PDF documentation here.</p>"},{"location":"user-guide/mie/#create-a-reference-sequence-data-file","title":"Create a Reference Sequence Data File","text":"<p>Warning</p> <p>This step is specific to the Human reference genome GRCh38. Cattle-specific input files are packaged with TrioTrain. If you are working with a new species, you will need to create this file for your reference genome.</p> <p>After completing the tutorial walk-through, create the Human reference SDF by running the following at the command line:</p> <pre><code>source ./scripts/start_conda.sh     # Ensure the previously built conda env is active\nbash scripts/setup/setup_rtg_tools.sh\n</code></pre> <p>For other species, use the following template:</p> Example | Creating the SDF ./scripts/setup/setup_rtg_tools.sh<pre><code>#!/bin/bash\n# scripts/setup/build_rtg_tools.sh\necho -e \"=== scripts/setup/build_rtg_tools.sh &gt; start $(date)\"\n##======= Create RTG-TOOLS SDF ======================================##\n# required for using rtg-tools 'mendelian'\nif [ ! -f ./triotrain/variant_calling/data/GIAB/reference/rtg_tools/reference.txt ]; then\nrtg format -o ./triotrain/variant_calling/data/GIAB/reference/rtg_tools/ ./triotrain/variant_calling/data/GIAB/reference/GRCh38_no_alt_analysis_set.fasta\nelse\necho \"$(date '+%Y-%m-%d %H:%M:%S') INFO: RTG-TOOLS SDF already exists... SKIPPING AHEAD\"\nfi\necho -e \"=== scripts/setup/build_rtg_tools.sh&gt; end $(date)\"\n</code></pre>"},{"location":"user-guide/resubmit/","title":"Handling SLURM Job Failure","text":"<p>SLURM job re-submission works on (1) TrioTrain iteration at a time, to prevent duplicating any currently running jobs from other iterations.</p>"},{"location":"user-guide/resubmit/#re-submit-existing-sbatch","title":"Re-Submit Existing SBATCH","text":"<p>Occasionally, a SLURM job may fail randomly. For example, you may get an email with the following subject line:</p> <p><code>SLURM Job_id=27671698 Name=examples-parallel-Father1-region4 Failed, Run time 00:20:27, NODE_FAIL</code></p> <p>Individual SLURM jobs can be re-submitted using a previously made SBATCH file by adding the following flags:</p> <ul> <li><code>--start-itr</code>: tells TrioTrain which specific iteration to re-start (i.e. Father1 = 1, Mother1 = 2, etc.)</li> <li><code>--restart-jobs</code>: tells TrioTrain which job(s) to restart for a particular phase by providing a JSON-format string in <code>'{\"phase_name&lt;:genome&gt;\": [job_index, job_index]}'</code> format. If the list of job indexes includes a 0, TrioTrain will correct this to uses 1-based indexing to ensure that region1 or test1 jobs correspond to the first job index.</li> </ul> <p>Note</p> <p>Re-submitting an upstream job, will re-submit all downstream jobs for that iteration. Re-submitting <code>make_examples</code> for Father-region1 will re-run nearly the entire iteration as the initial job will also trigger TrioTrain to re-submit <code>beam_shuffle</code> for Father-region1 followed by <code>re_shuffle</code> for Father. Re-shuffling will trigger <code>train_eval</code>, <code>select_ckt</code>, and <code>call_variants</code>, which then triggers <code>compare_happy</code> and <code>convert_happy</code>.</p> <p>For the above example, run the following at the command line:</p> <pre><code>python3 triotrain/run_trio_train.py                                         \\\n-g Father                                                               \\\n--unmapped-reads chrUn                                                  \\\n--est-examples 1                                                        \\\n-m triotrain/model_training/tutorial/GIAB.Human_tutorial_metadata.csv   \\\n-n GIAB_Trio                                                            \\\n-r triotrain/model_training/tutorial/resources_used.json                \\\n--num-tests 3                                                           \\\n--output ../TUTORIAL                                                    \\\n--start-itr 1                                                           \\\n--stop-itr 2                                                            \\\n--restart-jobs '{\"make_examples:Father\": [4]}'                          \\\n--dry-run                                                               \\\n--custom-checkpoint triotrain/model_training/pretrained_models/v1.4.0_withIS_withAF/wgs_af.model.ckpt\n</code></pre>"},{"location":"user-guide/resubmit/#re-submit-a-new-sbatch","title":"Re-Submit a New SBATCH","text":"<p>SLURM jobs may also fail due to insufficient resource requests, particularly the <code>beam_shuffle</code> or <code>re_shuffle</code> jobs. These jobs will require you to overwrite the existing SBATCH job file with new resources.</p> <p>Individual SLURM jobs can be re-submitted easily using the two flags above with an additional flag:</p> <ul> <li><code>--overwrite</code>: tells TrioTrain to re-write a new SBATCH file and replace existing results files.</li> </ul> <p>Warning</p> <p>Using this flag for any upstream job will replace all exising downstream results. Use the <code>--dry-run</code> flag to confirm how this flag will behave prior to re-running any jobs.</p> <pre><code>python3 triotrain/run_trio_train.py                                         \\\n-g Father                                                               \\\n--unmapped-reads chrUn                                                  \\\n--est-examples 1                                                        \\\n-m triotrain/model_training/tutorial/GIAB.Human_tutorial_metadata.csv   \\\n-n GIAB_Trio                                                            \\\n-r triotrain/model_training/tutorial/resources_used.json                \\\n--num-tests 3                                                           \\ \n--output ../TUTORIAL                                                    \\\n--start-itr 1                                                           \\\n--restart-jobs '{\"make_examples:Father\": [4]}'                          \\\n--overwrite                                                             \\\n--dry-run                                                               \\\n--custom-checkpoint triotrain/model_training/pretrained_models/v1.4.0_withIS_withAF/wgs_af.model.ckpt\n</code></pre>"},{"location":"user-guide/resubmit/#including-currently-running-jobs","title":"Including Currently Running Jobs","text":"<p>If you need to re-start a downstream job that needs to be contigent upon a currently running job, you can edit the <code>--restart-jobs</code> flag to include existing SLURM job numbers. For example, the following would re-submit <code>compare_happy</code> for <code>test1</code>, and create new SBATCH files for <code>test2</code> and <code>test3</code>:</p> <pre><code>python3 triotrain/run_trio_train.py                                         \\\n-g Father                                                               \\\n--unmapped-reads chrUn                                                  \\\n--est-examples 1                                                        \\\n-m triotrain/model_training/tutorial/GIAB.Human_tutorial_metadata.csv   \\\n-n GIAB_Trio                                                            \\\n-r triotrain/model_training/tutorial/resources_used.json                \\\n--num-tests 3                                                           \\\n--custom-checkpoint triotrain/model_training/pretrained_models/v1.4.0_withIS_withAF/wgs_af.model.ckpt \\\n--output ../TUTORIAL                                                    \\\n--start-itr 1                                                           \\\n--stop-itr 2                                                            \\\n--restart-jobs '{\"call_variants\": [27669522, 2, 3]}'                    \\\n--overwrite                                                             \\\n--dry-run                                                               \\\n--custom-checkpoint triotrain/model_training/pretrained_models/v1.4.0_withIS_withAF/wgs_af.model.ckpt\n</code></pre>"},{"location":"user-guide/usage_guide/","title":"TrioTrain Data","text":""},{"location":"user-guide/usage_guide/#data-assumptions","title":"Data Assumptions","text":"<p>TrioTrain and DeepVariant use several input file formats; however, all files must:</p> <ul> <li>exist before the execution of the pipeline</li> <li>be compatible with the reference genome provided to the pipeline</li> <li>be sorted and indexed</li> <li>contain only one sample per file</li> </ul>"},{"location":"user-guide/usage_guide/#required-raw-data","title":"Required Raw Data","text":"<ol> <li> <p>Reference Genome</p> <ul> <li>must be in <code>FASTA</code> format</li> <li>includes the corresponding <code>.fai</code> index file generated with <code>samtools faidx</code> and located in the same directory</li> <li>includes the corresponding <code>.dict</code> file generated with <code>picard</code> and located in the same directory</li> <li>(OPTIONALLY) includes the corresponding Sequence Data File (SDF) generated with <code>rtg-tools format</code> and located at the same path in a sub-directory called \"rtg_tools\" \u2014 required for calculating Mendelian Inhertiance Errors with testing genomes</li> </ul> </li> <li> <p>Aligned Reads File(s)</p> <ul> <li>must be aligned to the reference genome above</li> <li>can be in either <code>BAM</code> format or <code>CRAM</code> format</li> <li>includes the corresponding <code>.bai</code> or <code>.csi</code> index file located in the same directory</li> </ul> </li> <li> <p>Benchmarking Variant File(s)</p> <ul> <li>also referred to as  \"truth genotypes\", or \"gold-standard genotypes\"</li> <li>must be in in <code>VCF</code> format and compressed with <code>bgzip</code></li> <li>includes a corresponding <code>.tbi</code> index generated with <code>tabix</code> and located in the same directory</li> <li>excludes any homozygous reference genotypes and any sites that violate Mendelian inheritance expectations</li> </ul> </li> <li> <p>Benchmarking Region File(s)</p> <ul> <li>also referred to as \"callable regions\"</li> <li>must be in <code>BED</code> format</li> <li>must be compatible with the specified reference genome</li> <li>compressed files will be decompressed</li> <li>use 0-based coordinates</li> </ul> </li> <li> <p>Starting DeepVariant Model Checkpoint</p> <ul> <li>used for warm-start a new model  initializing weights with a previous model</li> <li>can either be downloaded from Google Cloud Platform (GCP) or created previously by a prior TrioTrain iteration</li> <li> <p>Checkpoints consists of four (4) files all located in the same directory:</p> <ol> <li><code>.data-00000-of-00001</code></li> <li><code>.index</code></li> <li><code>.meta</code></li> <li><code>.example_info.json</code> \u2014 defines which features to include as channels within the images given to DeepVariant in <code>tfRecord</code> format</li> </ol> <p>Note</p> <p>Examples made with different channel(s), a different tfRecord shape, or a different DeepVariant version can be incompatible with your chosen starting model. Get details about model features compatible with TrioTrain, such as shape, version and channels here.</p> <p>You can check the shape of a model's examples with:</p> <p><code>jq '.' &lt;model_name&gt;.example_info.json</code>.           </p> </li> </ul> </li> <li> <p>(OPTIONAL) Population Allele Frequencies</p> <ul> <li>must be in <code>VCF</code> format and compressed with <code>bgzip</code></li> <li>includes a corresponding <code>.tbi</code> index generated with <code>tabix</code> and located in the same directory</li> <li>genotypes should be removed</li> </ul> </li> </ol> <p>Note</p> <p>Our automated, cattle-optimized GATK Best Practices workflow used to generate our input files automatically performs realignment and  recalibration with Base Quality Score Recalibration (BQSR). BQSR is not required or recommended for using the single-step variant caller from DeepVariant, as it may decrease the accuracy.</p> <p>However, re-training involves a small proportion of the total genomes processed by UMAG group (55 of 5,500+). Thus, removing BQSR would  decrease the quality of the entire cohort's GATK genotypes used in other research. The impact of including BQSR in our truth labels was not evaluated further during TrioTrain's development.</p>"},{"location":"user-guide/usage_guide/#triotrain-specific-inputs","title":"TrioTrain-Specific Inputs","text":""},{"location":"user-guide/usage_guide/#configuring-slurm-resources","title":"Configuring SLURM Resources","text":"<p>SLURM resources are handled by TrioTrain via a resource configuration file (<code>.json</code>).</p> Example | Resource Config File triotrain/model_training/tutorial/resources_used.json<pre><code>{\n    \"make_examples\": {\n        \"partition\": \"hpc5,hpc6,BioCompute\",\n        \"nodes\": 1,\n        \"ntasks\": 40,\n        \"mem\": 379067,\n        \"CPUmem\": 9000,\n        \"time\": \"0-2:00:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"beam_shuffle\": {\n        \"partition\": \"hpc5,BioCompute\",\n        \"nodes\": 1,\n        \"ntasks\": 40,\n        \"mem\": 379067,\n        \"time\": \"0-2:00:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"re_shuffle\": {\n        \"partition\": \"BioCompute,Lewis\",\n        \"nodes\": 1,\n        \"ntasks\": 1,\n        \"mem\": \"200G\",\n        \"time\": \"0-10:00:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"train_eval\": {\n        \"partition\": \"gpu3\",\n        \"gres\": \"gpu:2\",\n        \"nodes\": 1,\n        \"ntasks\": 16,\n        \"mem\": \"0\",\n        \"time\": \"2-00:00:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"select_ckpt\": {\n        \"partition\": \"BioCompute,Lewis\",\n        \"nodes\": 1,\n        \"ntasks\": 1,\n        \"mem\": 500,\n        \"time\": \"0-00:30:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"call_variants\": {\n        \"partition\": \"hpc5,BioCompute\",\n        \"nodes\": 1,\n        \"ntasks\": 40,\n        \"mem\": 379067,\n        \"time\": \"2-00:00:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"compare_happy\": {\n        \"partition\": \"BioCompute,hpc5\",\n        \"nodes\": 1,\n        \"ntasks\": 40,\n        \"mem\": \"300G\",\n        \"time\": \"0-12:00:00\",\n        \"account\": \"biocommunity\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"convert_happy\": {\n        \"partition\": \"BioCompute,hpc3,hpc5,Lewis\",\n        \"nodes\": 1,\n        \"ntasks\": 24,\n        \"mem\": \"120G\",\n        \"time\": \"0-05:00:00\",\n        \"account\": \"biocommunity\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"show_examples\": {\n        \"partition\": \"BioCompute,Lewis\",\n        \"nodes\": 1,\n        \"mem\": \"1G\",\n        \"time\": \"0-02:00:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"summary\": {\n        \"partition\": \"hpc5,hpc6,Lewis\",\n        \"nodes\": 1,\n        \"ntasks\": 4,\n        \"mem\": \"40G\",\n        \"time\": \"0-10:00:00\",\n        \"account\": \"schnabellab\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    }\n}\n</code></pre>"},{"location":"user-guide/usage_guide/#resource-config-format","title":"Resource Config Format","text":"<p>Contains nested dictionaries in the following format:</p> <pre><code>{\"phase_name\": {\n\"SLURM_SBATCH_PARAMETER\": \"value\",\n\"SLURM_SBATCH_PARAMETER\": \"value\",\n\"SLURM_SBATCH_PARAMETER\": \"value\",\n}\n}\n</code></pre> <p>There are (8) required phases within TrioTrain's SLURM config file. Valid <code>phase_names</code> for these include:</p> <ol> <li><code>make_examples</code></li> <li><code>beam_shuffle</code></li> <li><code>re_shuffle</code></li> <li><code>train_eval</code></li> <li><code>select_ckpt</code></li> <li><code>call_variants</code></li> <li><code>compare_happy</code></li> <li><code>convert_happy</code></li> </ol> <p>Additionally, there are (3) optional phase names for TrioTrain's supplementary analyes that include:</p> <ol> <li><code>show_examples</code> \u2014 for running TrioTrain in 'demo' mode</li> <li><code>summary_stats</code> \u2014 for calculating per-VCF stats for each test genome</li> <li><code>mie_summary</code> \u2014 for calculating Mendelian Inheritance Error rate in trio-binned test genomes</li> </ol> <p>The value for each <code>phase_name</code> is a nested dictionary that contains key:value pairs of parameters for running SBATCH job files. You can view valid SBATCH options in the SLURM documentation.</p> Example | Resource Config File triotrain/model_training/tutorial/resources_used.json<pre><code>{\n    \"make_examples\": {\n        \"partition\": \"hpc5,hpc6,BioCompute\",\n        \"nodes\": 1,\n        \"ntasks\": 40,\n        \"mem\": 379067,\n        \"CPUmem\": 9000,\n        \"time\": \"0-2:00:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"beam_shuffle\": {\n        \"partition\": \"hpc5,BioCompute\",\n        \"nodes\": 1,\n        \"ntasks\": 40,\n        \"mem\": 379067,\n        \"time\": \"0-2:00:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"re_shuffle\": {\n        \"partition\": \"BioCompute,Lewis\",\n        \"nodes\": 1,\n        \"ntasks\": 1,\n        \"mem\": \"200G\",\n        \"time\": \"0-10:00:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"train_eval\": {\n        \"partition\": \"gpu3\",\n        \"gres\": \"gpu:2\",\n        \"nodes\": 1,\n        \"ntasks\": 16,\n        \"mem\": \"0\",\n        \"time\": \"2-00:00:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"select_ckpt\": {\n        \"partition\": \"BioCompute,Lewis\",\n        \"nodes\": 1,\n        \"ntasks\": 1,\n        \"mem\": 500,\n        \"time\": \"0-00:30:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"call_variants\": {\n        \"partition\": \"hpc5,BioCompute\",\n        \"nodes\": 1,\n        \"ntasks\": 40,\n        \"mem\": 379067,\n        \"time\": \"2-00:00:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"compare_happy\": {\n        \"partition\": \"BioCompute,hpc5\",\n        \"nodes\": 1,\n        \"ntasks\": 40,\n        \"mem\": \"300G\",\n        \"time\": \"0-12:00:00\",\n        \"account\": \"biocommunity\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"convert_happy\": {\n        \"partition\": \"BioCompute,hpc3,hpc5,Lewis\",\n        \"nodes\": 1,\n        \"ntasks\": 24,\n        \"mem\": \"120G\",\n        \"time\": \"0-05:00:00\",\n        \"account\": \"biocommunity\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"show_examples\": {\n        \"partition\": \"BioCompute,Lewis\",\n        \"nodes\": 1,\n        \"mem\": \"1G\",\n        \"time\": \"0-02:00:00\",\n        \"account\": \"animalsci\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    },\n    \"summary\": {\n        \"partition\": \"hpc5,hpc6,Lewis\",\n        \"nodes\": 1,\n        \"ntasks\": 4,\n        \"mem\": \"40G\",\n        \"time\": \"0-10:00:00\",\n        \"account\": \"schnabellab\",\n        \"email\": \"jakth2@mail.missouri.edu\"\n    }\n}\n</code></pre>"},{"location":"user-guide/usage_guide/#providing-required-data-to-triotrain","title":"Providing required data to TrioTrain","text":"<p>Input files are handled by the primary input file for TrioTrain, a metadata file in <code>.csv</code> format. This input file includes trio pedigree information, and the absolute file paths for the local data you want to give DeepVariant.</p> <p>Different metadata files are used to define different re-training approaches. For example, you can alter the order in which trios are given to DeepVariant by varying the row order in two different metadata files.</p>"},{"location":"user-guide/usage_guide/#metadata-assumptions","title":"Metadata Assumptions","text":"<ul> <li>The first row includes column headers which will become variable names within TrioTrain</li> <li>Each row corresponds to one complete family trio resulting in (2) re-training iterations, one for each parent</li> <li>Row order determines the sequential order of how trios seen by DeepVariant</li> <li>There are (24) REQUIRED columns that must be in the order specified in the Metadata Format section below</li> </ul> <p>Note</p> <p>If the data are available, you can perform additional iterations of TrioTrain by adding rows for each additional trio.</p> <p>Likewise, further test replicates can be achieved by adding columns in sets of three [<code>BAM,TruthVCF,TruthBED</code>] for each additional test genome.</p>"},{"location":"user-guide/usage_guide/#minimum-data-required","title":"Minimum Data Required","text":"<p>At a minimum, the metadata file must provide absolute paths to the following input files:</p> <ol> <li> <p>TrioTrain performs two iterations of re-training, one for each parent in a trio which requires:</p> <ul> <li>Three (3) aligned read data <code>.bam</code> files, with the corresponding <code>.bai</code> index.</li> <li>Three (3) benchmark <code>.vcf.gz</code> files, with the corresponding <code>.vcf.gz.tbi</code> index.</li> <li>Three (3) benchmark region <code>.bed</code> files.</li> </ul> </li> <li> <p>TrioTrain tests the model produced for each iteration using a set of genomes previously unseen by the model. Ideally, these testing samples should consist of individuals outside of the family and requires:</p> <ul> <li>One or more (1+) aligned read data <code>.bam</code> files, with the corresponding <code>.bai</code> index.</li> <li>One or more (1+) benchmark <code>.vcf.gz</code> files, with the corresponding <code>.vcf.gz.tbi</code> index.</li> <li>One or more (1+) benchmark <code>.bed</code> files.</li> </ul> </li> </ol>"},{"location":"user-guide/usage_guide/#metadata-format","title":"Metadata Format","text":"Column Number Column Name Description Data Type 1 RunOrder Sequential number for each trio integer 2 RunName A unique name for the trio's output directory string without spaces 3 ChildSampleID A primary, unique identifier for a child; must match the SampleID in the child\u2019s <code>VCF/BAM/BED</code> files alpha-numeric characters 4 ChildLabID A secondary, unique ID for a child ; <code>default=ChildSampleID</code> alpha-numeric characters 5 FatherSampleID A primary, unique identifier for a father; must match the SampleID in the father\u2019s <code>VCF/BAM/BED</code> files alpha-numeric characters 6 FatherLabID A secondary, unique ID for a father; <code>default=FatherSampleID</code> alpha-numeric characters 7 MotherSampleID A primary, unique identifier for a mother; must match the SampleID in the mother\u2019s <code>VCF/BAM/BED</code> files alpha-numeric characters 8 MotherLabID A secondary, unique ID for a mother; <code>default=MotherSampleID</code> alpha-numeric characters 9 ChildSex The sex of the child, where <code>F=female, M=male, U=unknown</code> <code>F</code>, <code>M</code>, <code>U</code> 10 RefFASTA The absolute path to the reference file <code>/path/to/file</code> 11 PopVCF The absolute path to the population allele frequency file; if blank, allele frequency information will not be included in the TensorFlow records during example image creation <code>/path/to/file</code> 12 RegionsFile a <code>.bed</code> file where each line represents a genomic region for shuffling; each shuffling region produce a set of file shards which depends upon the number of CPUs requested via SLURM; over-rides RegionShuffling if included <code>/path/to/file</code> 13 ChildReadsBAM The absolute path to the child's aligned reads <code>/path/to/file</code> 14 ChildTruthVCF The absolute path to the child's truth genotypes <code>/path/to/file</code> 15 ChildCallableBED The absolute path to the child's callable regions <code>/path/to/file</code> 16 FatherReadsBAM The absolute path to the fathers's aligned reads <code>/path/to/file</code> 17 FatherTruthVCF The absolute path to the father's truth genotypes <code>/path/to/file</code> 18 FatherCallableBED The absolute path to the father's callable regions <code>/path/to/file</code> 19 MotherReadsBAM The absolute path to the mother's aligned reads <code>/path/to/file</code> 20 MotherVCF The absolute path to the mother's truth genotypes <code>/path/to/file</code> 21 MotherCallableBED The absolute path to the mother's callable regions <code>/path/to/file</code> 22 Test1ReadsBAM The absolute path to a test genome's aligned reads <code>/path/to/file</code> 23 Test1TruthVCF The absolute path to a test genome's truth genotypes <code>/path/to/file</code> 24 Test1CallableBED The absolute path to a test genome's callable regions <code>/path/to/file</code>"},{"location":"user-guide/usage_guide/#adding-more-test-genomes","title":"Adding more test genomes","text":"<p>Each additional testing genome can be supplied by adding three (3) more columns in the following order:</p> Column Number Column Name Description Data Type 25 Test#ReadsBAM The absolute path to a test genome's aligned reads <code>/path/to/file</code> 26 Test#TruthVCF The absolute path to a test genome's truth genotypes <code>/path/to/file</code> 27 Test#CallableBED The absolute path to a test genome's callable regions <code>/path/to/file</code> <p>Note</p> <p>The <code>#</code> in <code>Test#</code> does not correspond to the order each test is performed, as testing is performed in parallel. However, the number for each test genomes must be sequential to provide a unique label for output files.</p>"},{"location":"user-guide/usage_guide/#triotrain-outputs","title":"TrioTrain Outputs","text":"<p>TODO: add a description here!</p>"}]}